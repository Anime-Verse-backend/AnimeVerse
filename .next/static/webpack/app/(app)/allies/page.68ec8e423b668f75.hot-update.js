"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(app)/allies/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addAlly: function() { return /* binding */ addAlly; },\n/* harmony export */   addAnime: function() { return /* binding */ addAnime; },\n/* harmony export */   addComment: function() { return /* binding */ addComment; },\n/* harmony export */   addDeveloper: function() { return /* binding */ addDeveloper; },\n/* harmony export */   addEpisode: function() { return /* binding */ addEpisode; },\n/* harmony export */   addEpisodeComment: function() { return /* binding */ addEpisodeComment; },\n/* harmony export */   addSeason: function() { return /* binding */ addSeason; },\n/* harmony export */   deleteAlly: function() { return /* binding */ deleteAlly; },\n/* harmony export */   deleteAnime: function() { return /* binding */ deleteAnime; },\n/* harmony export */   deleteComment: function() { return /* binding */ deleteComment; },\n/* harmony export */   deleteDeveloper: function() { return /* binding */ deleteDeveloper; },\n/* harmony export */   deleteEpisode: function() { return /* binding */ deleteEpisode; },\n/* harmony export */   deleteEpisodeComment: function() { return /* binding */ deleteEpisodeComment; },\n/* harmony export */   deleteStaffChatMessage: function() { return /* binding */ deleteStaffChatMessage; },\n/* harmony export */   deleteUser: function() { return /* binding */ deleteUser; },\n/* harmony export */   forgotPassword: function() { return /* binding */ forgotPassword; },\n/* harmony export */   getAdminDashboardStats: function() { return /* binding */ getAdminDashboardStats; },\n/* harmony export */   getAllies: function() { return /* binding */ getAllies; },\n/* harmony export */   getAnimeById: function() { return /* binding */ getAnimeById; },\n/* harmony export */   getAnimes: function() { return /* binding */ getAnimes; },\n/* harmony export */   getAnimesForHome: function() { return /* binding */ getAnimesForHome; },\n/* harmony export */   getCurrentUser: function() { return /* binding */ getCurrentUser; },\n/* harmony export */   getDevelopers: function() { return /* binding */ getDevelopers; },\n/* harmony export */   getEpisodeComments: function() { return /* binding */ getEpisodeComments; },\n/* harmony export */   getGenres: function() { return /* binding */ getGenres; },\n/* harmony export */   getStaffChatMessages: function() { return /* binding */ getStaffChatMessages; },\n/* harmony export */   getSupportTickets: function() { return /* binding */ getSupportTickets; },\n/* harmony export */   getUserProfile: function() { return /* binding */ getUserProfile; },\n/* harmony export */   getUsers: function() { return /* binding */ getUsers; },\n/* harmony export */   login: function() { return /* binding */ login; },\n/* harmony export */   logout: function() { return /* binding */ logout; },\n/* harmony export */   postStaffChatMessage: function() { return /* binding */ postStaffChatMessage; },\n/* harmony export */   register: function() { return /* binding */ register; },\n/* harmony export */   resetPassword: function() { return /* binding */ resetPassword; },\n/* harmony export */   submitDisabledAccountTicket: function() { return /* binding */ submitDisabledAccountTicket; },\n/* harmony export */   submitTicket: function() { return /* binding */ submitTicket; },\n/* harmony export */   updateAlly: function() { return /* binding */ updateAlly; },\n/* harmony export */   updateAnime: function() { return /* binding */ updateAnime; },\n/* harmony export */   updateAvatar: function() { return /* binding */ updateAvatar; },\n/* harmony export */   updateComment: function() { return /* binding */ updateComment; },\n/* harmony export */   updateDeveloper: function() { return /* binding */ updateDeveloper; },\n/* harmony export */   updateEpisode: function() { return /* binding */ updateEpisode; },\n/* harmony export */   updateEpisodeComment: function() { return /* binding */ updateEpisodeComment; },\n/* harmony export */   updatePassword: function() { return /* binding */ updatePassword; },\n/* harmony export */   updateProfile: function() { return /* binding */ updateProfile; },\n/* harmony export */   updateStaffChatMessage: function() { return /* binding */ updateStaffChatMessage; },\n/* harmony export */   updateTicketStatus: function() { return /* binding */ updateTicketStatus; },\n/* harmony export */   updateUserRole: function() { return /* binding */ updateUserRole; },\n/* harmony export */   updateUserStatus: function() { return /* binding */ updateUserStatus; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/process/browser.js\");\n// --- REAL API SERVICE ---\n// This file connects the Next.js frontend to a real backend API.\n// It uses `fetch` to make HTTP requests to the endpoints defined in Python.\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://127.0.0.1:8000\";\n// --- HELPER FUNCTIONS ---\nconst getAuthHeader = ()=>{\n    // Retrieves the token from localStorage to authorize requests.\n    const token =  true ? localStorage.getItem(\"animeverse-auth-token\") : 0;\n    return token ? {\n        \"Authorization\": \"Bearer \".concat(token)\n    } : {};\n};\nasync function handleResponse(response) {\n    if (response.status === 204) {\n        return {};\n    }\n    const text = await response.text();\n    if (!response.ok) {\n        let error;\n        try {\n            error = JSON.parse(text);\n        } catch (e) {\n            error = {\n                message: text || response.statusText\n            };\n        }\n        throw new Error(error.message || \"An error occurred\");\n    }\n    return text ? JSON.parse(text) : {};\n}\nconst buildUrl = (path, params)=>{\n    const url = new URL(\"\".concat(API_URL).concat(path));\n    if (params) {\n        Object.entries(params).forEach((param)=>{\n            let [key, value] = param;\n            if (value !== null && value !== undefined && value !== \"\") {\n                url.searchParams.append(key, String(value));\n            }\n        });\n    }\n    return url.toString();\n};\nconst buildFormData = (data)=>{\n    const formData = new FormData();\n    Object.entries(data).forEach((param)=>{\n        let [key, value] = param;\n        // This is now only used for Anime form, which handles base64 separately\n        if (key === \"imageFile\" && value instanceof File) {\n        // This case might not be used if we switch everything to base64\n        } else if (key === \"genre\" && Array.isArray(value)) {\n            formData.append(key, value.join(\",\"));\n        } else if (value !== null && value !== undefined) {\n            if (typeof value === \"object\" && value !== null && !(value instanceof File)) {\n                formData.append(key, JSON.stringify(value));\n            } else {\n                formData.append(key, String(value));\n            }\n        }\n    });\n    return formData;\n};\n// --- AUTHENTICATION ---\nconst login = async (email, password)=>{\n    const response = await fetch(buildUrl(\"/api/auth/login\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            email,\n            password\n        })\n    });\n    return handleResponse(response);\n};\nconst logout = async ()=>{\n    // In a real app, you might want to invalidate the token on the server\n    console.log(\"User logged out, cleared local token.\");\n    return;\n};\nconst register = async (name, email, password)=>{\n    const response = await fetch(buildUrl(\"/api/auth/register\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            name,\n            email,\n            password\n        })\n    });\n    return handleResponse(response);\n};\nconst forgotPassword = async (email)=>{\n    const response = await fetch(buildUrl(\"/api/auth/forgot-password\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            email\n        })\n    });\n    return handleResponse(response);\n};\nconst resetPassword = async (token, password)=>{\n    const response = await fetch(buildUrl(\"/api/auth/reset-password\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            token,\n            password\n        })\n    });\n    return handleResponse(response);\n};\nconst getCurrentUser = async ()=>{\n    const token =  true ? localStorage.getItem(\"animeverse-auth-token\") : 0;\n    if (!token) throw new Error(\"No auth token found\");\n    const response = await fetch(buildUrl(\"/api/users/me\"), {\n        headers: getAuthHeader()\n    });\n    return handleResponse(response);\n};\n// --- ANIME ---\nconst getAnimes = async function() {\n    let filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    const response = await fetch(buildUrl(\"/api/animes\", filters));\n    return handleResponse(response);\n};\nconst getAnimeById = async (id)=>{\n    if (!id) return undefined;\n    const response = await fetch(buildUrl(\"/api/animes/\".concat(id)), {\n        headers: getAuthHeader()\n    });\n    return handleResponse(response);\n};\nconst getAnimesForHome = async ()=>{\n    const response = await fetch(buildUrl(\"/api/animes/home-sections\"));\n    return handleResponse(response);\n};\nconst addAnime = async (animeData)=>{\n    const formData = buildFormData(animeData);\n    const response = await fetch(buildUrl(\"/api/animes\"), {\n        method: \"POST\",\n        headers: getAuthHeader(),\n        body: formData\n    });\n    return handleResponse(response);\n};\nconst updateAnime = async (id, animeData)=>{\n    const formData = buildFormData(animeData);\n    const response = await fetch(buildUrl(\"/api/animes/\".concat(id)), {\n        method: \"PATCH\",\n        headers: getAuthHeader(),\n        body: formData\n    });\n    return handleResponse(response);\n};\nconst deleteAnime = async (id)=>{\n    await fetch(buildUrl(\"/api/animes/\".concat(id)), {\n        method: \"DELETE\",\n        headers: getAuthHeader()\n    });\n};\n// --- USERS ---\nconst getUserProfile = async (username)=>{\n    const response = await fetch(buildUrl(\"/api/profiles/\".concat(username)));\n    return handleResponse(response);\n};\nconst getUsers = async (query)=>{\n    const response = await fetch(buildUrl(\"/api/users\", {\n        q: query\n    }), {\n        headers: getAuthHeader()\n    });\n    return handleResponse(response);\n};\nconst updateUserRole = async (userId, role)=>{\n    const response = await fetch(buildUrl(\"/api/users/\".concat(userId, \"/role\")), {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify({\n            role\n        })\n    });\n    return handleResponse(response);\n};\nconst updateUserStatus = async (userId, status)=>{\n    const response = await fetch(buildUrl(\"/api/users/\".concat(userId, \"/status\")), {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify({\n            status\n        })\n    });\n    return handleResponse(response);\n};\nconst deleteUser = async (userId)=>{\n    await fetch(buildUrl(\"/api/users/\".concat(userId)), {\n        method: \"DELETE\",\n        headers: getAuthHeader()\n    });\n};\nconst updateProfile = async (profileData)=>{\n    const response = await fetch(buildUrl(\"/api/users/me\"), {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify(profileData)\n    });\n    return handleResponse(response);\n};\nconst updatePassword = async (currentPassword, newPassword)=>{\n    const response = await fetch(buildUrl(\"/api/users/me/password\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify({\n            currentPassword,\n            newPassword\n        })\n    });\n    await handleResponse(response);\n};\nconst updateAvatar = async (avatarBase64)=>{\n    const response = await fetch(buildUrl(\"/api/users/me/avatar\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify({\n            avatarBase64\n        })\n    });\n    const { avatarUrl } = await handleResponse(response);\n    return avatarUrl;\n};\n// --- COMMENTS ---\nconst addComment = async (animeId, data)=>{\n    const response = await fetch(buildUrl(\"/api/animes/\".concat(animeId, \"/comments\")), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify(data)\n    });\n    return handleResponse(response);\n};\nconst updateComment = async (animeId, commentId, text)=>{\n    const response = await fetch(buildUrl(\"/api/animes/\".concat(animeId, \"/comments/\").concat(commentId)), {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify({\n            text\n        })\n    });\n    return handleResponse(response);\n};\nconst deleteComment = async (animeId, commentId)=>{\n    await fetch(buildUrl(\"/api/animes/\".concat(animeId, \"/comments/\").concat(commentId)), {\n        method: \"DELETE\",\n        headers: getAuthHeader()\n    });\n};\n// --- EPISODE COMMENTS ---\nconst getEpisodeComments = async (episodeId)=>{\n    const response = await fetch(buildUrl(\"/api/episodes/\".concat(episodeId, \"/comments\")), {\n        headers: getAuthHeader()\n    });\n    return handleResponse(response);\n};\nconst addEpisodeComment = async (episodeId, data)=>{\n    const response = await fetch(buildUrl(\"/api/episodes/\".concat(episodeId, \"/comments\")), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify(data)\n    });\n    return handleResponse(response);\n};\nconst updateEpisodeComment = async (episodeId, commentId, text)=>{\n    const response = await fetch(buildUrl(\"/api/episodes/\".concat(episodeId, \"/comments/\").concat(commentId)), {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify({\n            text\n        })\n    });\n    return handleResponse(response);\n};\nconst deleteEpisodeComment = async (episodeId, commentId)=>{\n    await fetch(buildUrl(\"/api/episodes/\".concat(episodeId, \"/comments/\").concat(commentId)), {\n        method: \"DELETE\",\n        headers: getAuthHeader()\n    });\n};\n// --- SEASONS & EPISODES ---\nconst addSeason = async (animeId, seasonData)=>{\n    const response = await fetch(buildUrl(\"/api/animes/\".concat(animeId, \"/seasons\")), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify(seasonData)\n    });\n    return handleResponse(response);\n};\nconst addEpisode = async (animeId, seasonId, episodeData)=>{\n    const response = await fetch(buildUrl(\"/api/animes/\".concat(animeId, \"/seasons/\").concat(seasonId, \"/episodes\")), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify(episodeData)\n    });\n    return handleResponse(response);\n};\nconst deleteEpisode = async (animeId, seasonId, episodeId)=>{\n    await fetch(buildUrl(\"/api/animes/\".concat(animeId, \"/seasons/\").concat(seasonId, \"/episodes/\").concat(episodeId)), {\n        method: \"DELETE\",\n        headers: getAuthHeader()\n    });\n};\nconst updateEpisode = async (animeId, seasonId, episodeId, episodeData)=>{\n    const response = await fetch(buildUrl(\"/api/animes/\".concat(animeId, \"/seasons/\").concat(seasonId, \"/episodes/\").concat(episodeId)), {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify(episodeData)\n    });\n    return handleResponse(response);\n};\n// --- STAFF CHAT ---\nconst getStaffChatMessages = async ()=>{\n    const response = await fetch(buildUrl(\"/api/staff-chat\"), {\n        headers: getAuthHeader()\n    });\n    return handleResponse(response);\n};\nconst postStaffChatMessage = async (data)=>{\n    const response = await fetch(buildUrl(\"/api/staff-chat\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify(data)\n    });\n    return handleResponse(response);\n};\nconst updateStaffChatMessage = async (messageId, text)=>{\n    const response = await fetch(buildUrl(\"/api/staff-chat/\".concat(messageId)), {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify({\n            text\n        })\n    });\n    return handleResponse(response);\n};\nconst deleteStaffChatMessage = async (messageId)=>{\n    await fetch(buildUrl(\"/api/staff-chat/\".concat(messageId)), {\n        method: \"DELETE\",\n        headers: getAuthHeader()\n    });\n};\n// --- MISC ---\nconst getGenres = async ()=>{\n    const response = await fetch(buildUrl(\"/api/genres\"));\n    return handleResponse(response);\n};\nconst getAdminDashboardStats = async ()=>{\n    // This is a mock implementation. A real implementation would query the backend.\n    const animes = await getAnimes();\n    const users = await getUsers();\n    return {\n        totalAnimes: animes.length,\n        totalUsers: users.length,\n        viewsLast24h: Math.floor(Math.random() * 5000) + 1000,\n        pendingReviews: Math.floor(Math.random() * 20)\n    };\n};\nconst submitDisabledAccountTicket = async (email, message)=>{\n    const response = await fetch(buildUrl(\"/api/support/disabled-account\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            email,\n            message\n        })\n    });\n    return handleResponse(response);\n};\n// --- SUPPORT TICKETS ---\nconst submitTicket = async (data)=>{\n    const response = await fetch(buildUrl(\"/api/support/ticket\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify(data)\n    });\n    return handleResponse(response);\n};\nconst getSupportTickets = async ()=>{\n    const response = await fetch(buildUrl(\"/api/support/tickets\"), {\n        headers: getAuthHeader()\n    });\n    return handleResponse(response);\n};\nconst updateTicketStatus = async (ticketId, status)=>{\n    const response = await fetch(buildUrl(\"/api/support/tickets/\".concat(ticketId, \"/status\")), {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify({\n            status\n        })\n    });\n    return handleResponse(response);\n};\n// --- ALLIES ---\nconst getAllies = async ()=>{\n    const response = await fetch(buildUrl(\"/api/allies\"));\n    return handleResponse(response);\n};\nconst addAlly = async (allyData)=>{\n    const response = await fetch(buildUrl(\"/api/allies\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify(allyData)\n    });\n    return handleResponse(response);\n};\nconst updateAlly = async (id, allyData)=>{\n    const response = await fetch(buildUrl(\"/api/allies/\".concat(id)), {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify(allyData)\n    });\n    return handleResponse(response);\n};\nconst deleteAlly = async (id)=>{\n    await fetch(buildUrl(\"/api/allies/\".concat(id)), {\n        method: \"DELETE\",\n        headers: getAuthHeader()\n    });\n};\n// --- DEVELOPERS ---\nconst getDevelopers = async ()=>{\n    const response = await fetch(buildUrl(\"/api/developers\"));\n    return handleResponse(response);\n};\nconst addDeveloper = async (devData)=>{\n    const response = await fetch(buildUrl(\"/api/developers\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify(devData)\n    });\n    return handleResponse(response);\n};\nconst updateDeveloper = async (id, devData)=>{\n    const response = await fetch(buildUrl(\"/api/developers/\".concat(id)), {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeader()\n        },\n        body: JSON.stringify(devData)\n    });\n    return handleResponse(response);\n};\nconst deleteDeveloper = async (id)=>{\n    await fetch(buildUrl(\"/api/developers/\".concat(id)), {\n        method: \"DELETE\",\n        headers: getAuthHeader()\n    });\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});