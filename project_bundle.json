
{
  "files": [
    {
      "path": "src/ai/flows/related-animes-flow.ts",
      "content": "'use server';\n/**\n * @fileOverview Suggests related anime based on a given anime's details.\n *\n * - suggestRelatedAnime - A function that provides related anime suggestions.\n * - RelatedAnimeInput - The input type for the suggestRelatedAnime function.\n * - RelatedAnimeOutput - The return type for the suggestRelatedAnime function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst RelatedAnimeInputSchema = z.object({\n  title: z.string().describe(\"The title of the anime to base recommendations on.\"),\n  genres: z.string().describe(\"A comma-separated list of genres for the anime.\"),\n  description: z.string().describe(\"A short description of the anime.\"),\n});\nexport type RelatedAnimeInput = z.infer<typeof RelatedAnimeInputSchema>;\n\nconst RelatedAnimeOutputSchema = z.object({\n  recommendations: z.array(z.string()).describe('A list of 3-5 anime titles that are similar to the input anime.'),\n});\nexport type RelatedAnimeOutput = z.infer<typeof RelatedAnimeOutputSchema>;\n\nexport async function suggestRelatedAnime(input: RelatedAnimeInput): Promise<RelatedAnimeOutput> {\n  return relatedAnimeFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'relatedAnimePrompt',\n  input: {schema: RelatedAnimeInputSchema},\n  output: {schema: RelatedAnimeOutputSchema},\n  prompt: `You are an expert anime recommender. A user is viewing an anime with the following details:\n- Title: {{{title}}}\n- Genres: {{{genres}}}\n- Description: {{{description}}}\n\nBased on these details, suggest 3 to 5 other anime series that they might enjoy. Provide only the titles of the recommended anime. Your output must be a list of strings.`,\n});\n\nconst relatedAnimeFlow = ai.defineFlow(\n  {\n    name: 'relatedAnimeFlow',\n    inputSchema: RelatedAnimeInputSchema,\n    outputSchema: RelatedAnimeOutputSchema,\n  },\n  async (input) => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"
    },
    {
      "path": "src/ai/genkit.ts",
      "content": "import {config} from 'dotenv';\nconfig();\n\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"
    },
    {
      "path": "src/app/actions.ts",
      "content": "'use server';\n\n// By importing the functions directly from the flow files (which are marked 'use server'),\n// we ensure that the entire call chain remains on the server.\nimport { suggestRelatedAnime } from '@/ai/flows/related-animes-flow';\nimport type { RelatedAnimeInput, RelatedAnimeOutput } from '@/ai/flows/related-animes-flow';\n\n\n/**\n * Server Action to suggest related anime.\n * This function is safe to call from client components.\n */\nexport async function suggestRelatedAnimeAction(input: RelatedAnimeInput): Promise<RelatedAnimeOutput> {\n  return await suggestRelatedAnime(input);\n}\n"
    },
    {
      "path": "src/app/globals.css",
      "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n \n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --primary: 275 70% 38%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 300 80% 60%;\n    --accent-foreground: 240 5.9% 10%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --ring: 275 70% 38%;\n    --radius: 0.5rem;\n  }\n \n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 4.5%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 275 70% 42%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 300 70% 55%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 300 70% 55%;\n  }\n}\n \n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n}\n"
    },
    {
      "path": "src/app/layout.tsx",
      "content": "import type { Metadata } from 'next';\nimport { Inter, Space_Grotesk } from 'next/font/google';\nimport './globals.css';\nimport { cn } from '@/lib/utils';\nimport { Providers } from '@/components/providers';\nimport Script from 'next/script';\n\nconst fontSans = Inter({\n  subsets: ['latin'],\n  variable: '--font-sans',\n});\n\nconst fontHeading = Space_Grotesk({\n  subsets: ['latin'],\n  variable: '--font-heading',\n});\n\nexport const metadata: Metadata = {\n  title: 'AnimeVerse | Tu Universo de Anime Online',\n  description: 'Explora, descubre y comenta sobre tus series de anime favoritas. Únete a la comunidad más grande de anime en español. Series, reseñas, noticias y más.',\n  icons: {\n    icon: `data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><g fill='hsl(275, 70%, 42%)'><path d='M82 20L50 85L18 20H82Z' /><path d='M50 85L25 95H75L50 85Z' /></g><g fill='white'><path d='M50 50L40 65H60L50 50Z' /></g></svg>`\n  }\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"es\" suppressHydrationWarning>\n      <head>\n        <Script\n          async\n          src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-XXXXXXXXXXXXXXXX\"\n          crossOrigin=\"anonymous\"\n          strategy=\"lazyOnload\"\n        />\n      </head>\n      <body\n        className={cn(\n          'min-h-screen bg-background font-body antialiased',\n          fontSans.variable,\n          fontHeading.variable\n        )}\n      >\n        <Providers>{children}</Providers>\n      </body>\n    </html>\n  );\n}\n"
    },
    {
      "path": "src/app/page.tsx",
      "content": "\"use client\";\n\nimport { redirect } from 'next/navigation';\n\nexport default function Home() {\n  redirect('/dashboard');\n}\n"
    },
    {
      "path": "src/app/(app)/layout.tsx",
      "content": "\"use client\";\n\nimport { AppLayout } from \"@/components/app-layout\";\n\nexport default function AppMainLayout({ children }: { children: React.ReactNode }) {\n  return <AppLayout>{children}</AppLayout>;\n}\n"
    },
    {
      "path": "src/app/(app)/page.tsx",
      "content": "\"use client\";\n\nimport { redirect } from 'next/navigation';\n\nexport default function Home() {\n  redirect('/dashboard');\n}\n"
    },
    {
      "path": "src/app/(app)/dashboard/page.tsx",
      "content": "\"use client\"\n\nexport const dynamic = 'force-dynamic';\n\nimport React, { useState, useMemo, useEffect } from 'react';\nimport type { Anime, Genre } from '@/lib/types';\nimport * as api from '@/lib/api';\nimport { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from '@/components/ui/carousel';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { Star, Search, Loader2, X } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { AnimeCard } from '@/components/anime-card';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { ContinueWatching } from '@/components/continue-watching';\n\nconst capitalize = (s: string) => s.charAt(0).toUpperCase() + s.slice(1);\n\nexport default function DashboardPage() {\n  const [homeSections, setHomeSections] = useState<Record<string, Anime[]>>({});\n  const [featuredAnimes, setFeaturedAnimes] = useState<Anime[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [genres, setGenres] = useState<Genre[]>([]);\n\n  // State for filters\n  const [searchTerm, setSearchTerm] = useState('');\n  const [genreFilter, setGenreFilter] = useState('all');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [sortBy, setSortBy] = useState('rating_desc');\n  \n  const [isFiltering, setIsFiltering] = useState(false);\n  const [filteredAnimes, setFilteredAnimes] = useState<Anime[]>([]);\n  const [filterLoading, setFilterLoading] = useState(false);\n  \n  const activeFilters = searchTerm || genreFilter !== 'all' || statusFilter !== 'all';\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        setLoading(true);\n        const [sections, featured, apiGenres] = await Promise.all([\n          api.getAnimesForHome(),\n          api.getAnimes({ isFeatured: true }),\n          api.getGenres(),\n        ]);\n        setHomeSections(sections);\n        setFeaturedAnimes(featured);\n        setGenres(apiGenres);\n      } catch (error) {\n        console.error(\"Failed to fetch dashboard data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, []);\n\n  const handleSearchAndFilter = async () => {\n      if (!activeFilters) {\n          setIsFiltering(false);\n          return;\n      }\n\n      setIsFiltering(true);\n      setFilterLoading(true);\n      try {\n          const params = {\n              q: searchTerm,\n              genre: genreFilter === 'all' ? undefined : genreFilter,\n              status: statusFilter === 'all' ? undefined : statusFilter,\n              sort_by: sortBy,\n          };\n          const results = await api.getAnimes(params);\n          setFilteredAnimes(results);\n      } catch (error) {\n          console.error(\"Failed to fetch filtered animes:\", error);\n      } finally {\n          setFilterLoading(false);\n      }\n  };\n  \n  useEffect(() => {\n    const debounceTimer = setTimeout(() => {\n        handleSearchAndFilter();\n    }, 300); // Debounce API calls\n\n    return () => clearTimeout(debounceTimer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchTerm, genreFilter, statusFilter, sortBy]);\n\n\n  const clearFilters = () => {\n      setSearchTerm('');\n      setGenreFilter('all');\n      setStatusFilter('all');\n      setSortBy('rating_desc');\n      setIsFiltering(false);\n  };\n  \n  if (loading) {\n    return (\n      <div className=\"flex h-full w-full items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"space-y-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold font-headline\">Explora el Universo del Anime</h1>\n          <p className=\"text-muted-foreground\">Encuentra tu próxima serie favorita.</p>\n        </div>\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground\" />\n          <Input \n            placeholder=\"Busca un anime por título...\"\n            className=\"pl-10 text-base\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </div>\n        \n        {/* Filter Controls */}\n        <Card>\n            <CardContent className=\"p-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 items-end\">\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"genre-filter\">Género</Label>\n                        <Select value={genreFilter} onValueChange={setGenreFilter}>\n                            <SelectTrigger id=\"genre-filter\"><SelectValue /></SelectTrigger>\n                            <SelectContent>\n                                <SelectItem value=\"all\">Todos los Géneros</SelectItem>\n                                {genres.map(g => <SelectItem key={g.id} value={g.name}>{g.name}</SelectItem>)}                            </SelectContent>\n                        </Select>\n                    </div>\n                     <div className=\"space-y-2\">\n                        <Label htmlFor=\"status-filter\">Estado</Label>\n                        <Select value={statusFilter} onValueChange={setStatusFilter}>\n                            <SelectTrigger id=\"status-filter\"><SelectValue /></SelectTrigger>\n                            <SelectContent>\n                                <SelectItem value=\"all\">Todos los Estados</SelectItem>\n                                <SelectItem value=\"Airing\">En Emisión</SelectItem>\n                                <SelectItem value=\"Finished\">Finalizado</SelectItem>\n                                <SelectItem value=\"Upcoming\">Próximamente</SelectItem>\n                            </SelectContent>\n                        </Select>\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"sort-filter\">Ordenar Por</Label>\n                         <Select value={sortBy} onValueChange={setSortBy}>\n                            <SelectTrigger id=\"sort-filter\"><SelectValue /></SelectTrigger>\n                            <SelectContent>\n                                <SelectItem value=\"rating_desc\">Rating: Mayor a Menor</SelectItem>\n                                <SelectItem value=\"title_asc\">Alfabético</SelectItem>\n                            </SelectContent>\n                        </Select>\n                    </div>\n                    {activeFilters && (\n                        <Button variant=\"ghost\" onClick={clearFilters} className=\"w-full md:w-auto\">\n                            <X className=\"mr-2 h-4 w-4\" /> Limpiar Filtros\n                        </Button>\n                    )}\n                </div>\n            </CardContent>\n        </Card>\n      </div>\n\n      {isFiltering ? (\n        <div className=\"mt-8\">\n          <h2 className=\"text-2xl font-bold font-headline\">Resultados de Búsqueda</h2>\n           {filterLoading ? (\n             <div className=\"flex justify-center items-center py-24\">\n                <Loader2 className=\"h-8 w-8 animate-spin\" />\n             </div>\n           ) : (\n              filteredAnimes.length > 0 ? (\n                <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 mt-4\">\n                  {filteredAnimes.map(anime => <AnimeCard key={anime.id} anime={anime} />)}\n                </div>\n              ) : (\n                <p className=\"mt-4 text-muted-foreground py-12 text-center\">No se encontraron animes para tus criterios de búsqueda.</p>\n              )\n           )}\n        </div>\n      ) : (\n        <div className=\"space-y-12\">\n          \n          <ContinueWatching />\n\n          {featuredAnimes.length > 0 && (\n            <div className=\"space-y-4\">\n                <h2 className=\"text-2xl font-bold font-headline\">Destacados</h2>\n                <Carousel opts={{ align: \"start\", loop: true, }} className=\"w-full\">\n                  <CarouselContent>\n                    {featuredAnimes.map((anime) => (\n                       <CarouselItem key={anime.id} className=\"basis-11/12 md:basis-1/2 lg:basis-1/3\">\n                          <Link href={`/anime/${anime.id}-${anime.title.toLowerCase().replace(/ /g, '-')}`} className=\"block group\">\n                            <div className=\"relative aspect-video w-full rounded-lg overflow-hidden\">\n                              <Image src={anime.imageUrl} alt={anime.title} fill className=\"object-cover transition-transform duration-300 group-hover:scale-105\" data-ai-hint=\"anime action\" />\n                              <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent\" />\n                              <div className=\"absolute bottom-0 left-0 p-4\">\n                                <h3 className=\"text-xl font-bold text-white font-headline\">{anime.title}</h3>\n                                <div className=\"flex flex-wrap gap-2 mt-1\">\n                                  {(anime.genres || []).slice(0, 2).map((g) => (<Badge key={g.id} variant=\"secondary\" className=\"text-xs backdrop-blur-sm bg-black/20 text-white border-white/20\">{g.name}</Badge>))}                                </div>\n                              </div>\n                              <div className=\"absolute top-2 right-2 flex items-center gap-1 text-yellow-400 bg-black/30 backdrop-blur-sm px-2 py-1 rounded-full\">\n                                  <Star className=\"h-4 w-4 fill-current\" />\n                                  <span className=\"font-bold text-sm text-white\">{anime.rating}</span>\n                              </div>\n                            </div>\n                          </Link>\n                       </CarouselItem>\n                    ))}\n                  </CarouselContent>\n                  <CarouselPrevious className=\"hidden sm:flex\" />\n                  <CarouselNext className=\"hidden sm:flex\" />\n                </Carousel>\n            </div>\n          )}\n\n          <div className=\"space-y-8\">\n            {Object.entries(homeSections).map(([genre, animes]) => (\n              <div key={genre}>\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h2 className=\"text-2xl font-bold font-headline\">{capitalize(genre)}</h2>\n                  <Button asChild variant=\"link\" onClick={() => setGenreFilter(genre)}>\n                    <span className=\"cursor-pointer\">Ver Todos</span>\n                  </Button>\n                </div>\n                <Carousel opts={{ align: \"start\", dragFree: true }} className=\"w-full\">\n                  <CarouselContent>\n                    {animes.map((anime: Anime) => (\n                      <CarouselItem key={anime.id} className=\"basis-[80%] sm:basis-1/2 md:basis-1/3 lg:basis-1/4 xl:basis-1/5\">\n                        <AnimeCard anime={anime} />\n                      </CarouselItem>\n                    ))}\n                  </CarouselContent>\n                  <CarouselPrevious className=\"hidden sm:flex\" />\n                  <CarouselNext className=\"hidden sm:flex\"/>\n                </Carousel>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "path": "src/app/(app)/anime/[id]/page.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport { useParams, notFound } from 'next/navigation';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport type { Anime } from '@/lib/types';\nimport * as api from '@/lib/api';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Star, Info, Clock, PlayCircle, ChevronRight, Loader2, Youtube } from 'lucide-react';\nimport { Separator } from '@/components/ui/separator';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { CommentSection } from '@/components/comment-section';\nimport { RelatedAnimes } from '@/components/related-animes';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\n\nconst getYouTubeEmbedUrl = (url?: string): string | null => {\n    if (!url) return null;\n    let videoId: string | null = null;\n    try {\n        const urlObj = new URL(url);\n        if (urlObj.hostname === 'youtu.be') {\n            videoId = urlObj.pathname.slice(1);\n        } else if (urlObj.hostname.includes('youtube.com')) {\n            videoId = urlObj.searchParams.get('v');\n        }\n    } catch (e) {\n        return null; // Invalid URL\n    }\n\n    return videoId ? `https://www.youtube.com/embed/${videoId}` : null;\n};\n\nexport default function AnimeDetailPage() {\n  const params = useParams();\n  const animeId = typeof params.id === 'string' ? params.id.split('-')[0] : '';\n  \n  const [anime, setAnime] = useState<Anime | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (animeId) {\n      api.getAnimeById(animeId)\n        .then(data => {\n          if (data) {\n            setAnime(data);\n          } else {\n            notFound();\n          }\n        })\n        .catch(console.error)\n        .finally(() => setLoading(false));\n    }\n  }, [animeId]);\n\n  if (loading) {\n    return <div className=\"flex h-full w-full items-center justify-center\"><Loader2 className=\"h-8 w-8 animate-spin\" /></div>;\n  }\n\n  if (!anime) {\n    return notFound();\n  }\n\n  const embedUrl = getYouTubeEmbedUrl(anime.trailerUrl);\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"relative h-64 md:h-96 w-full rounded-xl overflow-hidden\">\n        <Image\n          src={anime.imageUrl}\n          alt={`Banner para ${anime.title}`}\n          fill\n          className=\"object-cover\"\n          data-ai-hint={`${(anime.genres?.[0]?.name || 'anime').toLowerCase()} landscape`}\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-background via-background/70 to-transparent\" />\n        <div className=\"absolute bottom-0 left-0 p-6 md:p-8\">\n          <h1 className=\"text-4xl md:text-5xl font-bold font-headline text-foreground\">Ver {anime.title} Online</h1>\n          <div className=\"mt-2 flex items-center gap-4\">\n            <div className=\"flex items-center gap-1.5 text-yellow-400\">\n              <Star className=\"h-5 w-5 fill-current\" />\n              <span className=\"font-bold text-lg text-foreground\">{anime.rating}</span>\n            </div>\n            <Separator orientation=\"vertical\" className=\"h-6\" />\n            <div className=\"flex flex-wrap gap-2\">\n              {(anime.genres || []).map((g) => (\n                <Badge key={g.id} variant=\"secondary\">{g.name}</Badge>\n              ))}\n              <Badge variant=\"outline\">{anime.audience}</Badge>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        <div className=\"lg:col-span-2 space-y-8\">\n          {anime.announcement && (\n            <Alert>\n              <Info className=\"h-4 w-4\" />\n              <AlertTitle>Anuncio</AlertTitle>\n              <AlertDescription>{anime.announcement}</AlertDescription>\n            </Alert>\n          )}\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"font-headline text-xl\">Sinopsis de {anime.title}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">{anime.description}</p>\n            </CardContent>\n          </Card>\n          \n          {embedUrl && (\n            <Card>\n                <CardHeader>\n                    <CardTitle className=\"font-headline text-xl flex items-center gap-2\"><Youtube className=\"text-red-500\" /> Tráiler Oficial</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <div className=\"aspect-video\">\n                        <iframe\n                            className=\"w-full h-full rounded-lg\"\n                            src={embedUrl}\n                            title={`Tráiler de ${anime.title}`}\n                            frameBorder=\"0\"\n                            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                            allowFullScreen\n                        ></iframe>\n                    </div>\n                </CardContent>\n            </Card>\n          )}\n\n          <Card>\n            <CardHeader>\n                <CardTitle className=\"font-headline text-xl\">Temporadas y Episodios</CardTitle>\n            </CardHeader>\n            <CardContent>\n                {anime.seasons && anime.seasons.length > 0 ? (\n                    <Accordion type=\"single\" collapsible className=\"w-full\" defaultValue=\"item-0\">\n                        {anime.seasons.map((season, index) => (\n                            <AccordionItem value={`item-${index}`} key={season.id}>\n                                <AccordionTrigger>{season.title}</AccordionTrigger>\n                                <AccordionContent>\n                                    <ul className=\"space-y-2\">\n                                        {season.episodes.map(episode => (\n                                          <li key={episode.id}>\n                                            <Link href={`/watch/${anime.id}/${episode.id}`} className=\"flex justify-between items-center p-3 rounded-lg hover:bg-muted/50 transition-colors cursor-pointer group\">\n                                                <div className=\"flex items-center gap-4\">\n                                                    <PlayCircle className=\"h-6 w-6 text-muted-foreground group-hover:text-primary transition-colors\" />\n                                                    <div>\n                                                        <p className=\"font-medium group-hover:text-primary transition-colors\">{episode.title}</p>\n                                                        <div className=\"flex items-center gap-2 text-sm text-muted-foreground mt-1\">\n                                                            <Clock className=\"h-3 w-3\" />\n                                                            <span>{episode.duration} min</span>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <ChevronRight className=\"h-5 w-5 text-muted-foreground\" />\n                                            </Link>\n                                          </li>\n                                        ))}\n                                    </ul>\n                                </AccordionContent>\n                            </AccordionItem>\n                        ))}\n                    </Accordion>\n                ) : (\n                    <p className=\"text-muted-foreground text-center py-4\">La lista de episodios no está disponible aún.</p>\n                )}\n            </CardContent>\n          </Card>\n\n          <CommentSection initialComments={anime.comments || []} animeId={anime.id} />\n        </div>\n\n        <div className=\"space-y-8\">\n          <RelatedAnimes anime={anime} />\n        </div>\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "src/app/(app)/watch/[animeId]/[episodeId]/page.tsx",
      "content": "\n\"use client\";\n\nimport { useState, useMemo, useEffect } from 'react';\nimport { useParams, notFound, useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport * as api from '@/lib/api';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft, Server, Languages, Loader2, ListVideo, ChevronRight, ChevronLeft, FileText, MessageCircle } from 'lucide-react';\nimport type { Anime, Episode } from '@/lib/types';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { RelatedAnimes } from '@/components/related-animes';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport { cn } from '@/lib/utils';\nimport { EpisodeCommentSection } from '@/components/episode-comment-section';\nimport { AdBanner } from '@/components/ad-banner';\nimport { VideoPlayer } from '@/components/video-player';\n\nexport default function WatchPage() {\n    const router = useRouter();\n    const params = useParams();\n    const { animeId, episodeId } = params as { animeId: string; episodeId: string };\n\n    const [anime, setAnime] = useState<Anime | null>(null);\n    const [episode, setEpisode] = useState<Episode | null>(null);\n    const [loading, setLoading] = useState(true);\n\n    const [selectedLanguage, setSelectedLanguage] = useState<string>('');\n    const [selectedServer, setSelectedServer] = useState<string>('');\n    const [videoUrl, setVideoUrl] = useState<string>('');\n\n    useEffect(() => {\n        if (animeId && episodeId) {\n            setLoading(true);\n            setAnime(null);\n            setEpisode(null);\n            setSelectedLanguage('');\n            setSelectedServer('');\n            setVideoUrl('');\n\n            api.getAnimeById(animeId).then(data => {\n                if (data) {\n                    setAnime(data);\n                    const currentEpisode = data.seasons?.flatMap(s => s.episodes).find(e => e.id === episodeId);\n                    if (currentEpisode) {\n                        setEpisode(currentEpisode);\n                        const languages = [...new Set(currentEpisode.sources.map(s => s.language))];\n                        if (languages.length > 0) {\n                            const initialLanguage = languages.includes('Subtitled') ? 'Subtitled' : languages[0];\n                            setSelectedLanguage(initialLanguage);\n                            const servers = currentEpisode.sources.filter(s => s.language === initialLanguage).map(s => s.server);\n                            if (servers.length > 0) {\n                                setSelectedServer(servers[0]);\n                            }\n                        }\n                    } else {\n                        notFound();\n                    }\n                } else {\n                    notFound();\n                }\n            }).catch(console.error).finally(() => setLoading(false));\n        }\n    }, [animeId, episodeId]);\n\n    // Save to local storage for \"Continue Watching\"\n    useEffect(() => {\n        if (anime && episode) {\n            const continueWatchingData = {\n                animeId: anime.id,\n                animeTitle: anime.title,\n                animeImageUrl: anime.imageUrl,\n                episodeId: episode.id,\n                episodeTitle: episode.title,\n                timestamp: Date.now()\n            };\n            localStorage.setItem('continue-watching', JSON.stringify(continueWatchingData));\n        }\n    }, [anime, episode]);\n\n    const availableLanguages = useMemo(() => {\n        if (!episode) return [];\n        return [...new Set(episode.sources.map(s => s.language))];\n    }, [episode]);\n\n    const availableServers = useMemo(() => {\n        if (!episode || !selectedLanguage) return [];\n        return episode.sources.filter(s => s.language === selectedLanguage).map(s => s.server);\n    }, [episode, selectedLanguage]);\n    \n    const { currentSeasonEpisodes, previousEpisode, nextEpisode } = useMemo(() => {\n        if (!anime || !episode) return { currentSeasonEpisodes: [], previousEpisode: null, nextEpisode: null };\n        const season = anime.seasons.find(s => s.id === episode.seasonId);\n        if (!season) return { currentSeasonEpisodes: [], previousEpisode: null, nextEpisode: null };\n        \n        const sortedEpisodes = [...season.episodes].sort((a,b) => a.title.localeCompare(b.title, undefined, { numeric: true }));\n        const currentIndex = sortedEpisodes.findIndex(e => e.id === episode.id);\n\n        return {\n            currentSeasonEpisodes: sortedEpisodes,\n            previousEpisode: currentIndex > 0 ? sortedEpisodes[currentIndex - 1] : null,\n            nextEpisode: currentIndex < sortedEpisodes.length - 1 ? sortedEpisodes[currentIndex + 1] : null\n        };\n    }, [anime, episode]);\n\n    // Handle language change\n    const handleLanguageChange = (lang: string) => {\n        setSelectedLanguage(lang);\n        const servers = episode?.sources.filter(s => s.language === lang).map(s => s.server) || [];\n        setSelectedServer(servers.length > 0 ? servers[0] : '');\n    };\n    \n    useEffect(() => {\n        if (episode && selectedLanguage && selectedServer) {\n            const source = episode.sources.find(s => s.language === selectedLanguage && s.server === selectedServer);\n            setVideoUrl(source?.url || '');\n        } else {\n            setVideoUrl('');\n        }\n    }, [episode, selectedLanguage, selectedServer]);\n\n\n    if (loading) {\n        return <div className=\"flex h-[calc(100vh-4rem)] w-full items-center justify-center\"><Loader2 className=\"h-8 w-8 animate-spin\" /></div>;\n    }\n\n    if (!anime || !episode) {\n        return notFound();\n    }\n\n    const videoJsOptions = {\n        autoplay: true,\n        controls: true,\n        responsive: true,\n        fluid: true,\n        sources: [{\n            src: videoUrl,\n            type: 'video/mp4' // Adjust the type if it is needed\n        }],\n        ads: {},\n        vast: {\n            adTagUrl: \"https://pubads.g.doubleclick.net/gampad/ads?iu=/21775744923/external/vmap_ad_samples&sz=640x480&cust_params=sample_ar%3Dvmap1&ciu_szs=300x250&gdfp_req=1&ad_rule=1&output=vmap&unviewed_position_start=1&env=vp&impl=s&correlator=\"\n        }\n    };\n\n\n    return (\n        <div key={episodeId} className=\"grid grid-cols-1 lg:grid-cols-4 gap-8 items-start\">\n            <div className=\"lg:col-span-3 space-y-6\">\n                 <div>\n                    <Button variant=\"outline\" onClick={() => router.push(`/anime/${anime.id}`)}>\n                        <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                        Back to Anime Details\n                    </Button>\n                </div>\n                \n                <Card>\n                    <CardContent className=\"p-0\">\n                        <div className=\"aspect-video w-full rounded-t-lg overflow-hidden bg-black shadow-lg\">\n                           {videoUrl ? (\n                                <VideoPlayer options={videoJsOptions} />\n                            ) : (\n                                <div className=\"w-full h-full flex items-center justify-center text-muted-foreground bg-muted\">\n                                    Select a source to start watching\n                                </div>\n                            )}\n                        </div>\n                         <div className=\"p-6 space-y-4\">\n                             <div className=\"flex justify-between items-center\">\n                                <div>\n                                    <p className=\"text-sm text-primary font-semibold\">{anime.title}</p>\n                                    <CardTitle className=\"text-3xl font-headline\">{episode.title}</CardTitle>\n                                </div>\n                                <div className=\"flex gap-2\">\n                                    {previousEpisode && (\n                                        <Button asChild variant=\"outline\">\n                                            <Link href={`/watch/${animeId}/${previousEpisode.id}`}>\n                                                <ChevronLeft className=\"h-4 w-4 mr-2\" /> Prev\n                                            </Link>\n                                        </Button>\n                                    )}\n                                    {nextEpisode && (\n                                        <Button asChild>\n                                            <Link href={`/watch/${animeId}/${nextEpisode.id}`}>\n                                                Next <ChevronRight className=\"h-4 w-4 ml-2\" />\n                                            </Link>\n                                        </Button>\n                                    )}\n                                </div>\n                             </div>\n                             <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 pt-4\">\n                                <div className=\"space-y-2\">\n                                    <Label className=\"flex items-center\"><Languages className=\"mr-2 h-4 w-4\" /> Language</Label>\n                                     <Select value={selectedLanguage} onValueChange={handleLanguageChange}>\n                                        <SelectTrigger><SelectValue placeholder=\"Select language...\" /></SelectTrigger>\n                                        <SelectContent>\n                                            {availableLanguages.map(lang => (\n                                                <SelectItem key={lang} value={lang}>{lang}</SelectItem>\n                                            ))}\n                                        </SelectContent>\n                                    </Select>\n                                </div>\n                                 <div className=\"space-y-2\">\n                                    <Label className=\"flex items-center\"><Server className=\"mr-2 h-4 w-4\" /> Server</Label>\n                                     <Select value={selectedServer} onValueChange={setSelectedServer} disabled={!selectedLanguage}>\n                                        <SelectTrigger><SelectValue placeholder=\"Select server...\" /></SelectTrigger>\n                                        <SelectContent>\n                                            {availableServers.map(server => (\n                                                <SelectItem key={server} value={server}>{server}</SelectItem>\n                                            ))}\n                                        </SelectContent>\n                                    </Select>\n                                </div>\n                            </div>\n                         </div>\n                    </CardContent>\n                </Card>\n\n                <AdBanner />\n\n                {episode.synopsis && (\n                    <Card>\n                        <CardHeader>\n                            <CardTitle className=\"flex items-center gap-2 font-headline\">\n                                <FileText className=\"h-5 w-5\"/> Synopsis del Episodio\n                            </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                            <p className=\"text-muted-foreground\">{episode.synopsis}</p>\n                        </CardContent>\n                    </Card>\n                )}\n\n\n                 <Accordion type=\"single\" collapsible className=\"w-full\">\n                    <AccordionItem value=\"item-1\">\n                        <AccordionTrigger>\n                            <div className=\"flex items-center gap-2 font-headline text-lg\">\n                                <ListVideo className=\"h-5 w-5\"/> Episode List\n                            </div>\n                        </AccordionTrigger>\n                        <AccordionContent>\n                             <Card>\n                                <CardHeader>\n                                     <CardTitle className=\"font-headline\">{anime.seasons.find(s => s.id === episode?.seasonId)?.title}</CardTitle>\n                                </CardHeader>\n                                <CardContent>\n                                    <ScrollArea className=\"h-96\">\n                                        <ul className=\"space-y-2 pr-4\">\n                                            {currentSeasonEpisodes.map((ep, index) => (\n                                                <li key={ep.id}>\n                                                    <Link href={`/watch/${animeId}/${ep.id}`} className={cn(\n                                                        \"flex justify-between items-center p-3 rounded-lg hover:bg-muted/50 transition-colors cursor-pointer group\",\n                                                        ep.id === episodeId && \"bg-muted\"\n                                                    )}>\n                                                        <div className=\"flex items-center gap-3\">\n                                                            <div className={cn(\n                                                                \"flex h-6 w-6 items-center justify-center rounded-sm text-xs font-bold\",\n                                                                ep.id === episodeId ? \"bg-primary text-primary-foreground\" : \"bg-muted-foreground/20\"\n                                                            )}>\n                                                                {index + 1}\n                                                            </div>\n                                                            <p className={cn(\"font-medium group-hover:text-primary transition-colors\", ep.id === episodeId && \"text-primary\")}>{ep.title}</p>\n                                                        </div>\n                                                        {ep.id === episodeId && <ChevronRight className=\"h-5 w-5 text-primary\" />}\n                                                    </Link>\n                                                </li>\n                                            ))}\n                                        </ul>\n                                    </ScrollArea>\n                                </CardContent>\n                            </Card>\n                        </AccordionContent>\n                    </AccordionItem>\n                     <AccordionItem value=\"item-2\">\n                        <AccordionTrigger>\n                             <div className=\"flex items-center gap-2 font-headline text-lg\">\n                                <MessageCircle className=\"h-5 w-5\"/> Comments\n                            </div>\n                        </AccordionTrigger>\n                        <AccordionContent>\n                            <EpisodeCommentSection initialComments={episode.comments} episodeId={episode.id} />\n                        </AccordionContent>\n                    </AccordionItem>\n                </Accordion>\n            </div>\n\n            <div className=\"lg:col-span-1 space-y-6\">\n                <RelatedAnimes anime={anime} />\n            </div>\n        </div>\n    );\n}\n"
    },
    {
      "path": "src/app/(app)/profile/[username]/page.tsx",
      "content": "\"use client\";\n\nexport const dynamic = 'force-dynamic';\n\nimport { useState, useEffect } from 'react';\nimport { useParams, notFound } from 'next/navigation';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Loader2, Calendar, MessageSquare } from 'lucide-react';\nimport * as api from '@/lib/api';\nimport type { PublicUser } from '@/lib/types';\nimport { format, formatDistanceToNow } from 'date-fns';\nimport { Separator } from '@/components/ui/separator';\n\nconst getInitials = (name: string) => {\n    return name?.split(' ').map((n) => n[0]).join('').toUpperCase() || '';\n};\n\nexport default function UserProfilePage() {\n    const params = useParams();\n    const username = params.username as string;\n\n    const [userProfile, setUserProfile] = useState<PublicUser | null>(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        if (username) {\n            setLoading(true);\n            api.getUserProfile(username)\n                .then(data => {\n                    setUserProfile(data);\n                })\n                .catch(err => {\n                    console.error(err);\n                    notFound();\n                })\n                .finally(() => {\n                    setLoading(false);\n                });\n        }\n    }, [username]);\n\n    if (loading) {\n        return <div className=\"flex h-full w-full items-center justify-center\"><Loader2 className=\"h-8 w-8 animate-spin\" /></div>;\n    }\n\n    if (!userProfile) {\n        return notFound();\n    }\n\n    return (\n        <div className=\"space-y-8 max-w-4xl mx-auto\">\n            <Card>\n                <CardHeader className=\"flex flex-col sm:flex-row items-center gap-6 p-6\">\n                    <Avatar className=\"h-24 w-24 text-3xl\">\n                        <AvatarImage src={userProfile.avatarUrl} alt={userProfile.name} />\n                        <AvatarFallback>{getInitials(userProfile.name)}</AvatarFallback>\n                    </Avatar>\n                    <div className=\"text-center sm:text-left\">\n                        <h1 className=\"text-3xl font-bold font-headline\">{userProfile.name}</h1>\n                        <p className=\"text-muted-foreground\">@{userProfile.username}</p>\n                        <div className=\"flex items-center gap-2 mt-2 text-sm text-muted-foreground justify-center sm:justify-start\">\n                            <Calendar className=\"h-4 w-4\" />\n                            <span>Joined {format(new Date(userProfile.joined), 'MMMM yyyy')}</span>\n                        </div>\n                    </div>\n                </CardHeader>\n                {userProfile.bio && (\n                    <CardContent className=\"pt-0 p-6\">\n                        <Separator className=\"mb-4\"/>\n                        <p className=\"text-center sm:text-left text-muted-foreground\">{userProfile.bio}</p>\n                    </CardContent>\n                )}\n            </Card>\n\n            <Card>\n                <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                        <MessageSquare className=\"h-5 w-5\" /> Recent Activity\n                    </CardTitle>\n                    <CardDescription>\n                        {userProfile.comments.length > 0\n                            ? \"Latest comments from this user.\"\n                            : \"This user has not commented yet, or their activity is private.\"}\n                    </CardDescription>\n                </CardHeader>\n                <CardContent>\n                    {userProfile.comments.length > 0 && (\n                        <div className=\"space-y-6\">\n                            {userProfile.comments.map((comment, index) => (\n                                <div key={index} className=\"flex flex-col\">\n                                    <p className=\"text-sm text-muted-foreground\">\n                                        Commented on{' '}\n                                        <Link href={`/anime/${comment.anime_id}`} className=\"font-semibold text-primary hover:underline\">\n                                            {comment.anime_title}\n                                        </Link>\n                                         {' • '} \n                                        {formatDistanceToNow(new Date(comment.timestamp), { addSuffix: true })}\n                                    </p>\n                                    <blockquote className=\"mt-2 pl-4 border-l-2 border-border italic\">\n                                        {comment.text}\n                                    </blockquote>\n                                </div>\n                            ))}\n                        </div>\n                    )}\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n"
    },
    {
      "path": "src/app/(app)/profile/page.tsx",
      "content": "\"use client\"\n\nexport const dynamic = 'force-dynamic';\n\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { z } from \"zod\"\nimport { useAuth } from \"@/hooks/use-auth\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport * as api from '@/lib/api';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\nimport { Button } from \"@/components/ui/button\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Camera, Loader2 } from \"lucide-react\"\nimport { useRef, useState, useEffect } from \"react\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Switch } from \"@/components/ui/switch\"\nimport Link from \"next/link\"\n\nconst profileFormSchema = z.object({\n  name: z.string().min(2, { message: \"Name must be at least 2 characters.\" }),\n  bio: z.string().max(300, { message: \"Bio cannot be longer than 300 characters.\" }).optional(),\n  showActivity: z.boolean().default(true),\n})\n\nconst passwordFormSchema = z.object({\n    currentPassword: z.string().min(1, { message: \"Current password is required.\" }),\n    newPassword: z.string().min(8, { message: \"New password must be at least 8 characters.\" }),\n    confirmPassword: z.string()\n}).refine((data) => data.newPassword === data.confirmPassword, {\n    message: \"Passwords don't match.\",\n    path: [\"confirmPassword\"],\n})\n\nconst fileToDataUri = (file: File): Promise<string> => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as string);\n    reader.onerror = reject;\n});\n\n\nexport default function ProfilePage() {\n  const { user, checkUser, loading: authLoading } = useAuth()\n  const { toast } = useToast()\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [avatarPreview, setAvatarPreview] = useState<string | null>(user?.avatarUrl || null);\n  const [isUploading, setIsUploading] = useState(false);\n\n  const profileForm = useForm<z.infer<typeof profileFormSchema>>({\n    resolver: zodResolver(profileFormSchema),\n    defaultValues: {\n      name: \"\",\n      bio: \"\",\n      showActivity: true,\n    },\n  })\n\n  useEffect(() => {\n    if(user) {\n        setAvatarPreview(user.avatarUrl || null);\n        profileForm.reset({\n            name: user.name,\n            bio: user.bio || \"\",\n            showActivity: user.showActivity,\n        });\n    }\n  }, [user, profileForm]);\n\n  const getInitials = (name: string) => {\n    if (!name) return '';\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  }\n\n  const passwordForm = useForm<z.infer<typeof passwordFormSchema>>({\n    resolver: zodResolver(passwordFormSchema),\n    defaultValues: {\n        currentPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\"\n    }\n  })\n\n  async function onProfileSubmit(data: z.infer<typeof profileFormSchema>) {\n    try {\n        await api.updateProfile(data);\n        await checkUser(); // Re-fetch user data\n        toast({\n            title: \"Profile Updated\",\n            description: \"Your profile information has been saved.\",\n        });\n    } catch (error) {\n        toast({\n            variant: \"destructive\",\n            title: \"Error\",\n            description: \"Failed to update profile.\",\n        });\n    }\n  }\n\n  async function onPasswordSubmit(data: z.infer<typeof passwordFormSchema>) {\n     try {\n        await api.updatePassword(data.currentPassword, data.newPassword);\n        toast({\n            title: \"Password Updated\",\n            description: \"Your password has been changed successfully.\",\n        });\n        passwordForm.reset();\n    } catch (error: any) {\n         toast({\n            variant: \"destructive\",\n            title: \"Error\",\n            description: error.message || \"Failed to update password. Check your current password.\",\n        });\n    }\n  }\n\n  const handleAvatarChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const previewUrl = URL.createObjectURL(file);\n      setAvatarPreview(previewUrl);\n      setIsUploading(true);\n      try {\n        const base64 = await fileToDataUri(file);\n        await api.updateAvatar(base64);\n        await checkUser();\n        toast({ title: \"Avatar Updated\", description: \"Your new avatar has been saved.\"});\n      } catch (error) {\n        toast({ variant: \"destructive\", title: \"Upload Failed\", description: \"Could not update your avatar.\" });\n        setAvatarPreview(user?.avatarUrl || null); // Revert on failure\n      } finally {\n        setIsUploading(false);\n      }\n    }\n  };\n\n  if (authLoading || !user) {\n    return (\n        <div className=\"flex h-full w-full items-center justify-center\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-bold font-headline\">Profile Settings</h1>\n        <p className=\"text-muted-foreground\">Manage your account settings and public profile.</p>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 items-start\">\n        <div className=\"md:col-span-1\">\n            <Card>\n                <CardContent className=\"pt-6 flex flex-col items-center text-center\">\n                    <div className=\"relative mb-4\">\n                        <Avatar className=\"h-24 w-24\">\n                            <AvatarImage src={avatarPreview || `https://placehold.co/96x96.png`} alt={`@${user?.name}`} />\n                            <AvatarFallback>{getInitials(user.name)}</AvatarFallback>\n                        </Avatar>\n                        <input\n                            type=\"file\"\n                            ref={fileInputRef}\n                            onChange={handleAvatarChange}\n                            className=\"hidden\"\n                            accept=\"image/*\"\n                            disabled={isUploading}\n                        />\n                        <Button size=\"icon\" className=\"absolute bottom-0 right-0 rounded-full h-8 w-8\" onClick={() => fileInputRef.current?.click()} disabled={isUploading}>\n                            {isUploading ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Camera className=\"h-4 w-4\" />}\n                            <span className=\"sr-only\">Change photo</span>\n                        </Button>\n                    </div>\n                    <h2 className=\"text-xl font-bold\">{user?.name}</h2>\n                    <Link href={`/profile/${user.username}`} className=\"text-sm text-muted-foreground hover:underline\">@{user?.username}</Link>\n                </CardContent>\n            </Card>\n        </div>\n\n        <div className=\"md:col-span-2 space-y-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Profile Information</CardTitle>\n              <CardDescription>This information will be displayed on your public profile.</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Form {...profileForm}>\n                <form onSubmit={profileForm.handleSubmit(onProfileSubmit)} className=\"space-y-4\">\n                  <FormField control={profileForm.control} name=\"name\" render={({ field }) => (<FormItem><FormLabel>Display Name</FormLabel><FormControl><Input placeholder=\"Your Name\" {...field} /></FormControl><FormMessage /></FormItem>)} />\n                  <FormField control={profileForm.control} name=\"bio\" render={({ field }) => (<FormItem><FormLabel>Bio</FormLabel><FormControl><Textarea placeholder=\"Tell us a little bit about yourself\" {...field} /></FormControl><FormMessage /></FormItem>)} />\n                  <FormField control={profileForm.control} name=\"showActivity\" render={({ field }) => (<FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\"><div className=\"space-y-0.5\"><FormLabel>Show Public Activity</FormLabel><FormDescription>Allow other users to see your comments on your profile.</FormDescription></div><FormControl><Switch checked={field.value} onCheckedChange={field.onChange} /></FormControl></FormItem>)} />\n                  <div className=\"flex justify-end\">\n                    <Button type=\"submit\">Save Profile</Button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Security</CardTitle>\n              <CardDescription>Change your password.</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Form {...passwordForm}>\n                <form onSubmit={passwordForm.handleSubmit(onPasswordSubmit)} className=\"space-y-4\">\n                  <FormField control={passwordForm.control} name=\"currentPassword\" render={({ field }) => (<FormItem><FormLabel>Current Password</FormLabel><FormControl><Input type=\"password\" {...field} /></FormControl><FormMessage /></FormItem>)} />\n                  <FormField control={passwordForm.control} name=\"newPassword\" render={({ field }) => (<FormItem><FormLabel>New Password</FormLabel><FormControl><Input type=\"password\" {...field} /></FormControl><FormMessage /></FormItem>)} />\n                  <FormField control={passwordForm.control} name=\"confirmPassword\" render={({ field }) => (<FormItem><FormLabel>Confirm New Password</FormLabel><FormControl><Input type=\"password\" {...field} /></FormControl><FormMessage /></FormItem>)} />\n                  <div className=\"flex justify-end\">\n                    <Button type=\"submit\">Update Password</Button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n"
    },
    {
      "path": "src/app/(app)/settings/page.tsx",
      "content": "\"use client\"\n\nexport const dynamic = 'force-dynamic';\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Label } from \"@/components/ui/label\"\nimport { ThemeToggle } from \"@/components/theme-toggle\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Check, Star } from \"lucide-react\"\n\nexport default function SettingsPage() {\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-bold font-headline\">Settings</h1>\n        <p className=\"text-muted-foreground\">Manage your account and site preferences.</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Subscription</CardTitle>\n          <CardDescription>Manage your current plan and billing details.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col sm:flex-row items-start justify-between rounded-lg border p-4\">\n            <div className=\"space-y-1.5 mb-4 sm:mb-0\">\n                <Label className=\"text-base flex items-center gap-2\">\n                    Your Plan: \n                    <Badge>Free Tier</Badge>\n                </Label>\n                <p className=\"text-sm text-muted-foreground\">\n                    Limited access with ads. Upgrade for the full experience.\n                </p>\n            </div>\n            <Button>\n                <Star className=\"mr-2 h-4 w-4\" />\n                Upgrade to Premium\n            </Button>\n          </div>\n\n          <div className=\"mt-6\">\n            <h3 className=\"text-lg font-semibold\">Premium Plan Benefits</h3>\n            <ul className=\"mt-4 space-y-3 text-muted-foreground\">\n                <li className=\"flex items-center gap-3\">\n                    <Check className=\"h-5 w-5 text-primary\" />\n                    <span>Watch everything ad-free.</span>\n                </li>\n                 <li className=\"flex items-center gap-3\">\n                    <Check className=\"h-5 w-5 text-primary\" />\n                    <span>Access the full catalog in Full HD (1080p).</span>\n                </li>\n                 <li className=\"flex items-center gap-3\">\n                    <Check className=\"h-5 w-5 text-primary\" />\n                    <span>Get new episodes right after they air in Japan.</span>\n                </li>\n                 <li className=\"flex items-center gap-3\">\n                    <Check className=\"h-5 w-5 text-primary\" />\n                    <span>Support the anime industry.</span>\n                </li>\n            </ul>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Appearance</CardTitle>\n          <CardDescription>Customize the look and feel of the application.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"flex items-center justify-between space-x-2 rounded-lg border p-4\">\n            <div className=\"space-y-0.5\">\n              <Label htmlFor=\"theme-toggle\" className=\"text-base\">Theme</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Select a light or dark theme for the interface.\n              </p>\n            </div>\n            <ThemeToggle />\n          </div>\n\n          <div className=\"space-y-2 pt-4\">\n            <Label className=\"text-base\">Language</Label>\n            <p className=\"text-sm text-muted-foreground\">\n              Changing the language is a complex feature that will be implemented in a future update.\n            </p>\n          </div>\n\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n"
    },
    {
      "path": "src/app/(app)/allies/page.tsx",
      "content": "\"use client\"\n\nexport const dynamic = 'force-dynamic';\n\nimport { useState, useEffect } from 'react';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport type { Ally } from '@/lib/types';\nimport * as api from '@/lib/api';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2, Handshake, Link as LinkIcon, Star } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\nexport default function AlliesPage() {\n    const [allies, setAllies] = useState<Ally[]>([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        api.getAllies()\n            .then(data => setAllies(data))\n            .catch(console.error)\n            .finally(() => setLoading(false));\n    }, []);\n\n    const featuredAllies = allies.filter(a => a.isFeatured);\n    const regularAllies = allies.filter(a => !a.isFeatured);\n\n    if (loading) {\n        return <div className=\"flex h-full w-full items-center justify-center\"><Loader2 className=\"h-8 w-8 animate-spin\" /></div>;\n    }\n\n    return (\n        <div className=\"container mx-auto max-w-5xl py-8 space-y-12\">\n            <div>\n                <h1 className=\"text-4xl font-bold font-headline flex items-center gap-3\">\n                    <Handshake className=\"h-10 w-10 text-primary\" />\n                    Our Allies\n                </h1>\n                <p className=\"text-lg text-muted-foreground mt-2\">Meet the partners and communities that support AnimeVerse.</p>\n            </div>\n\n            {featuredAllies.length > 0 && (\n                 <div>\n                    <h2 className=\"text-2xl font-bold font-headline mb-4 flex items-center gap-2\">\n                        <Star className=\"h-6 w-6 text-yellow-400 fill-current\" />\n                        Featured Allies\n                    </h2>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        {featuredAllies.map(ally => (\n                            <Card key={ally.id} className=\"flex flex-col sm:flex-row items-center gap-6 p-6 hover:shadow-lg transition-shadow duration-300\">\n                                <Image\n                                    src={ally.imageUrl}\n                                    alt={`Logo of ${ally.name}`}\n                                    width={100}\n                                    height={100}\n                                    className=\"rounded-full object-cover h-24 w-24 shrink-0\"\n                                />\n                                <div className=\"text-center sm:text-left\">\n                                    <CardTitle className=\"text-xl font-bold\">{ally.name}</CardTitle>\n                                    <CardDescription className=\"mt-2\">{ally.description}</CardDescription>\n                                    <CardFooter className=\"p-0 mt-4 flex justify-center sm:justify-start\">\n                                         {ally.mainUrl && (\n                                            <Button asChild>\n                                                <Link href={ally.mainUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                                                    <LinkIcon className=\"mr-2 h-4 w-4\" />\n                                                    Visit Website\n                                                </Link>\n                                            </Button>\n                                         )}\n                                    </CardFooter>\n                                </div>\n                            </Card>\n                        ))}\n                    </div>\n                </div>\n            )}\n            \n            {regularAllies.length > 0 && (\n                <div>\n                     <h2 className=\"text-2xl font-bold font-headline mb-4\">Allies</h2>\n                     <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n                        {regularAllies.map(ally => (\n                            <Card key={ally.id} className=\"text-center hover:shadow-lg transition-shadow duration-300\">\n                                <CardHeader className=\"items-center\">\n                                     <Image\n                                        src={ally.imageUrl}\n                                        alt={`Logo of ${ally.name}`}\n                                        width={80}\n                                        height={80}\n                                        className=\"rounded-full object-cover h-20 w-20\"\n                                    />\n                                    <CardTitle>{ally.name}</CardTitle>\n                                </CardHeader>\n                                <CardContent>\n                                    <p className=\"text-sm text-muted-foreground min-h-[40px]\">{ally.description}</p>\n                                </CardContent>\n                                <CardFooter className=\"justify-center\">\n                                     {ally.mainUrl && (\n                                        <Button asChild variant=\"secondary\">\n                                            <Link href={ally.mainUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                                                <LinkIcon className=\"mr-2 h-4 w-4\" />\n                                                Visit\n                                            </Link>\n                                        </Button>\n                                     )}\n                                </CardFooter>\n                            </Card>\n                        ))}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n"
    },
    {
      "path": "src/app/(app)/contact/page.tsx",
      "content": "\"use client\"\n\nexport const dynamic = 'force-dynamic';\n\nimport { useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { z } from \"zod\"\nimport * as api from \"@/lib/api\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { Loader2, Send, LifeBuoy } from \"lucide-react\"\n\nconst formSchema = z.object({\n  subject: z.string().min(5, { message: \"Subject must be at least 5 characters.\" }),\n  message: z.string().min(10, { message: \"Message must be at least 10 characters.\" }),\n  ticketType: z.enum(['general-inquiry', 'bug-report', 'suggestion']),\n})\n\nexport default function ContactPage() {\n  const [loading, setLoading] = useState(false)\n  const [submitted, setSubmitted] = useState(false)\n  const { toast } = useToast()\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      subject: \"\",\n      message: \"\",\n      ticketType: \"general-inquiry\",\n    },\n  })\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setLoading(true)\n    try {\n      const response = await api.submitTicket(values);\n      toast({\n        title: \"Ticket Submitted\",\n        description: response.message,\n      })\n      setSubmitted(true)\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Could not submit your ticket.\",\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"container mx-auto max-w-2xl py-8\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-2xl font-headline\">\n            <LifeBuoy className=\"h-6 w-6\" /> Contact Support\n          </CardTitle>\n          <CardDescription>\n            {submitted\n              ? \"Thank you for reaching out. We'll get back to you as soon as possible.\"\n              : \"Have a question, suggestion, or a bug to report? Let us know.\"}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {submitted ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-muted-foreground\">Your message has been sent successfully.</p>\n            </div>\n          ) : (\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                 <FormField\n                  control={form.control}\n                  name=\"ticketType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Reason for Contact</FormLabel>\n                       <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select a reason\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"general-inquiry\">General Inquiry</SelectItem>\n                          <SelectItem value=\"bug-report\">Report a Bug</SelectItem>\n                          <SelectItem value=\"suggestion\">Suggestion</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"subject\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Subject</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., Issue with video player\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                 <FormField\n                  control={form.control}\n                  name=\"message\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Message</FormLabel>\n                      <FormControl>\n                        <Textarea rows={5} placeholder=\"Please describe your issue in detail...\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                  {loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  <Send className=\"mr-2 h-4 w-4\" />\n                  Submit Ticket\n                </Button>\n              </form>\n            </Form>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n"
    },
    {
      "path": "src/app/(app)/donate/page.tsx",
      "content": "\"use client\"\n\nexport const dynamic = 'force-dynamic';\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Heart, DollarSign } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\n// IMPORTANTE: Reemplaza esto con tu email de PayPal o tu Merchant ID.\nconst PAYPAL_BUSINESS_EMAIL = \"your-paypal-email@example.com\";\n\nconst donationAmounts = [5, 10, 20, 50];\n\nexport default function DonatePage() {\n  const [selectedAmount, setSelectedAmount] = useState(10);\n\n  const getPayPalLink = (amount: number) => {\n    if (!PAYPAL_BUSINESS_EMAIL || PAYPAL_BUSINESS_EMAIL === \"your-paypal-email@example.com\") {\n        return \"#\"; // Return a dead link if the email is not set\n    }\n    const url = new URL(\"https://www.paypal.com/donate/\");\n    url.searchParams.set(\"business\", PAYPAL_BUSINESS_EMAIL);\n    url.searchParams.set(\"amount\", amount.toString());\n    url.searchParams.set(\"currency_code\", \"USD\");\n    url.searchParams.set(\"item_name\", `Donation to AnimeVerse`);\n    url.searchParams.set(\"no_recurring\", \"1\");\n    return url.toString();\n  }\n\n  const isPayPalConfigured = PAYPAL_BUSINESS_EMAIL && PAYPAL_BUSINESS_EMAIL !== \"your-paypal-email@example.com\";\n\n  return (\n    <div className=\"container mx-auto max-w-2xl py-8\">\n      <Card className=\"text-center\">\n        <CardHeader>\n          <div className=\"mx-auto flex h-16 w-16 items-center justify-center rounded-full bg-primary/10 mb-4\">\n            <Heart className=\"h-8 w-8 text-primary\" />\n          </div>\n          <CardTitle className=\"text-3xl font-headline\">Apoya a AnimeVerse</CardTitle>\n          <CardDescription className=\"text-lg text-muted-foreground\">\n            Tu contribución nos ayuda a mantener los servidores funcionando y a seguir trayéndote el mejor anime.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {!isPayPalConfigured && (\n            <div className=\"mb-4 rounded-md border border-destructive/50 bg-destructive/10 p-3 text-sm text-destructive\">\n                <strong>Atención:</strong> La función de donación no está configurada. El desarrollador debe editar el archivo \n                <code className=\"mx-1 rounded bg-muted px-1.5 py-0.5 font-mono text-xs\">src/app/(app)/donate/page.tsx</code> \n                y reemplazar el email de PayPal de ejemplo.\n            </div>\n          )}\n\n          <p className=\"mb-4 font-semibold\">Elige un monto para donar:</p>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n            {donationAmounts.map(amount => (\n              <Button\n                key={amount}\n                variant=\"outline\"\n                className={cn(\"h-16 text-xl\", selectedAmount === amount && \"border-2 border-primary ring-2 ring-primary/20\")}\n                onClick={() => setSelectedAmount(amount)}\n              >\n                <DollarSign className=\"h-6 w-6 mr-1\" />{amount}\n              </Button>\n            ))}\n          </div>\n\n          <Button \n            asChild\n            size=\"lg\" \n            className=\"w-full text-lg\"\n            disabled={!isPayPalConfigured}\n          >\n            <a href={getPayPalLink(selectedAmount)} target=\"_blank\" rel=\"noopener noreferrer\">\n              Donar con PayPal\n            </a>\n          </Button>\n          <p className=\"mt-2 text-xs text-muted-foreground\">\n            Serás redirigido a la página segura de PayPal para completar la transacción.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n"
    },
    {
      "path": "src/app/(app)/admin/layout.tsx",
      "content": "\"use client\";\n\n// This file is intentionally left blank. \n// The layout logic has been moved to src/app/(app)/layout.tsx\n// to avoid nested layout conflicts.\nexport default function AdminLayout({ children }: { children: React.ReactNode }) {\n    return <>{children}</>;\n}\n"
    },
    {
      "path": "src/app/(app)/admin/page.tsx",
      "content": "\"use client\"\n\nexport const dynamic = 'force-dynamic';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Clapperboard, Users, BarChart3, ShieldCheck, Loader2 } from 'lucide-react';\nimport { redirect } from 'next/navigation';\nimport * as api from '@/lib/api';\n\ninterface AdminStats {\n  totalAnimes: number;\n  totalUsers: number;\n  viewsLast24h: number;\n  pendingReviews: number;\n}\n\nexport default function AdminPage() {\n  const { user, loading: authLoading } = useAuth();\n  const [stats, setStats] = useState<AdminStats | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (authLoading) return;\n\n    const isAdminRole = user?.role && ['admin', 'co-owner', 'owner'].includes(user.role);\n\n    if (isAdminRole) {\n      api.getAdminDashboardStats()\n        .then(setStats)\n        .catch(console.error)\n        .finally(() => setLoading(false));\n    } else if (!authLoading) {\n      redirect('/dashboard');\n    }\n  }, [user, authLoading]);\n\n  if (authLoading || loading || !stats) {\n    return (\n      <div className=\"flex h-full w-full items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex flex-col items-start gap-4 sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold font-headline\">Admin Dashboard</h1>\n          <p className=\"text-muted-foreground\">Welcome back, {user?.name}. Manage your universe.</p>\n        </div>\n      </div>\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Animes</CardTitle>\n            <Clapperboard className=\"h-5 w-5 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalAnimes}</div>\n            <p className=\"text-xs text-muted-foreground\">series in catalog</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            <Users className=\"h-5 w-5 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalUsers}</div>\n            <p className=\"text-xs text-muted-foreground\">registered accounts</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Site Views</CardTitle>\n            <BarChart3 className=\"h-5 w-5 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.viewsLast24h.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">in the last 24 hours</p>\n          </CardContent>\n        </Card>\n         <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Reviews</CardTitle>\n            <ShieldCheck className=\"h-5 w-5 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.pendingReviews}</div>\n            <p className=\"text-xs text-muted-foreground\">awaiting moderation</p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "src/app/(app)/admin/manage-anime/page.tsx",
      "content": "\"use client\";\n\nimport { useState, useMemo, useEffect } from 'react';\nimport Link from 'next/link';\nimport type { Anime, Genre } from '@/lib/types';\nimport * as api from '@/lib/api';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport {\n    AlertDialog,\n    AlertDialogAction,\n    AlertDialogCancel,\n    AlertDialogContent,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\"\nimport { PlusCircle, Trash, Pencil, Star, Search, ChevronLeft, ChevronRight, Loader2 } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { AnimeDialog } from '@/components/anime-dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport Image from 'next/image';\n\nconst ITEMS_PER_PAGE = 8;\n\nexport default function ManageAnimePage() {\n  const [animes, setAnimes] = useState<Anime[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\n  const [animeToDelete, setAnimeToDelete] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('All');\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const fetchAnimes = () => {\n    setLoading(true);\n    api.getAnimes()\n      .then(data => setAnimes(data || [])) // Ensure it's always an array\n      .catch(console.error)\n      .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    fetchAnimes();\n  }, []);\n\n  const filteredAnimes = useMemo(() => {\n    if (!animes) return [];\n    return animes\n      .filter(anime => \n        statusFilter === 'All' || anime.status === statusFilter\n      )\n      .filter(anime => \n        anime.title.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n  }, [animes, searchTerm, statusFilter]);\n\n  // Reset to first page whenever filters change\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [searchTerm, statusFilter]);\n\n  const totalPages = Math.ceil((filteredAnimes?.length || 0) / ITEMS_PER_PAGE);\n  const paginatedAnimes = useMemo(() => {\n    if (!filteredAnimes) return [];\n    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\n    return filteredAnimes.slice(startIndex, startIndex + ITEMS_PER_PAGE);\n  }, [filteredAnimes, currentPage]);\n\n  const handleAddNew = () => {\n    setIsDialogOpen(true);\n  };\n\n  const openDeleteDialog = (animeId: string) => {\n    setAnimeToDelete(animeId);\n    setIsAlertOpen(true);\n  };\n\n  const handleDelete = async () => {\n    if (!animeToDelete) return;\n    try {\n      await api.deleteAnime(animeToDelete);\n      setAnimes(animes.filter(a => a.id !== animeToDelete));\n      toast({ title: \"Success\", description: \"Anime deleted successfully.\" });\n    } catch (error) {\n      toast({ variant: 'destructive', title: \"Error\", description: \"Failed to delete anime.\" });\n    } finally {\n      setIsAlertOpen(false);\n      setAnimeToDelete(null);\n    }\n  };\n\n  const handleSave = async (data: Omit<Anime, 'id' | 'comments' | 'seasons' | 'genres'> & { imageBase64?: string | null, genre: string[] }) => {\n    try {\n      await api.addAnime(data);\n      toast({ title: \"Success\", description: \"Anime added successfully.\" });\n      setIsDialogOpen(false);\n      fetchAnimes(); // Refresh the list\n    } catch (error: any) {\n      toast({ variant: 'destructive', title: \"Error\", description: `Failed to add new anime: ${error.message}` });\n    }\n  };\n\n  if (loading) {\n    return <div className=\"flex h-full w-full items-center justify-center\"><Loader2 className=\"h-8 w-8 animate-spin\" /></div>;\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex flex-col items-start gap-4 sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold font-headline\">Manage Anime</h1>\n          <p className=\"text-muted-foreground\">Add, edit, or delete anime series from the catalog.</p>\n        </div>\n        <Button onClick={handleAddNew}>\n          <PlusCircle className=\"mr-2 h-4 w-4\" />\n          Add New Anime\n        </Button>\n      </div>\n\n      <Card>\n        <CardContent className=\"p-4 space-y-4\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by title...\"\n                className=\"pl-9\"\n                value={searchTerm}\n                onChange={e => setSearchTerm(e.target.value)}\n              />\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full sm:w-[180px]\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"All\">All Statuses</SelectItem>\n                <SelectItem value=\"Airing\">Airing</SelectItem>\n                <SelectItem value=\"Finished\">Finished</SelectItem>\n                <SelectItem value=\"Upcoming\">Upcoming</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n        {paginatedAnimes && paginatedAnimes.length > 0 ? paginatedAnimes.map(anime => (\n          <Card key={anime.id} className=\"flex flex-col\">\n            <CardHeader>\n              <div className=\"relative aspect-video\">\n                <Image src={anime.imageUrl} alt={anime.title} fill className=\"rounded-md object-cover\" />\n              </div>\n               <div className=\"flex items-start justify-between gap-2 mt-4\">\n                  <CardTitle className=\"text-base leading-tight flex-1\">\n                    <Link href={`/admin/manage-anime/${anime.id}`} className=\"hover:underline\">\n                      {anime.title}\n                    </Link>\n                  </CardTitle>\n                  {anime.isFeatured && <Star className=\"h-4 w-4 fill-primary text-primary\" />}\n               </div>\n            </CardHeader>\n            <CardContent className=\"space-y-3 pt-3 flex-grow\">\n                <div className=\"flex justify-between items-center text-sm\">\n                    <span className=\"text-muted-foreground\">Status</span>\n                    <Badge variant={anime.status === 'Airing' ? 'default' : 'secondary'}>{anime.status}</Badge>\n                </div>\n                 <div className=\"flex justify-between items-center text-sm\">\n                    <span className=\"text-muted-foreground\">Rating</span>\n                    <span>{anime.rating}</span>\n                </div>\n            </CardContent>\n            <CardFooter className=\"flex justify-end gap-2\">\n              <Button asChild variant=\"outline\" size=\"sm\">\n                <Link href={`/admin/manage-anime/${anime.id}`}>\n                  <Pencil className=\"mr-2 h-3 w-3\" /> Edit\n                </Link>\n              </Button>\n              <Button variant=\"destructive\" size=\"sm\" onClick={() => openDeleteDialog(anime.id)}>\n                <Trash className=\"mr-2 h-3 w-3\" /> Delete\n              </Button>\n            </CardFooter>\n          </Card>\n        )) : (\n            <div className=\"col-span-full py-12 text-center text-muted-foreground\">\n                <p>No results found for your search/filter criteria.</p>\n            </div>\n        )}\n      </div>\n\n       {totalPages > 1 && (\n        <div className=\"flex items-center justify-center gap-4\">\n          <Button variant=\"outline\" onClick={() => setCurrentPage(p => Math.max(p - 1, 1))} disabled={currentPage === 1}>\n            <ChevronLeft className=\"mr-2 h-4 w-4\" /> Previous\n          </Button>\n          <span className=\"text-sm font-medium text-muted-foreground\">\n            Page {currentPage} of {totalPages}\n          </span>\n          <Button variant=\"outline\" onClick={() => setCurrentPage(p => Math.min(p + 1, totalPages))} disabled={currentPage === totalPages}>\n            Next <ChevronRight className=\"ml-2 h-4 w-4\" />\n          </Button>\n        </div>\n      )}\n\n      <AnimeDialog\n        isOpen={isDialogOpen}\n        onOpenChange={setIsDialogOpen}\n        onSave={handleSave}\n      />\n      \n      <AlertDialog open={isAlertOpen} onOpenChange={setIsAlertOpen}>\n        <AlertDialogContent>\n            <AlertDialogHeader>\n                <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n                <AlertDialogDescription>\n                    This action cannot be undone. This will permanently delete the anime from the catalog.\n                </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n                <AlertDialogCancel onClick={() => setAnimeToDelete(null)}>Cancel</AlertDialogCancel>\n                <AlertDialogAction onClick={handleDelete} className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\">\n                    Delete\n                </AlertDialogAction>\n            </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n    </div>\n  );\n}\n"
    },
    {
      "path": "src/app/(app)/admin/manage-anime/[id]/page.tsx",
      "content": "\n\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport { useParams, notFound, useRouter } from 'next/navigation';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport Image from 'next/image';\nimport type { Anime, Season, Episode, EpisodeSource, Genre } from '@/lib/types';\nimport * as api from '@/lib/api';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { useToast } from '@/hooks/use-toast';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport { ArrowLeft, PlusCircle, Save, Trash, Loader2, Pencil } from 'lucide-react';\nimport { CommentSection } from '@/components/comment-section';\nimport { Separator } from '@/components/ui/separator';\nimport { Switch } from '@/components/ui/switch';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { EpisodeDialog } from '@/components/episode-dialog';\nimport {\n    AlertDialog,\n    AlertDialogAction,\n    AlertDialogCancel,\n    AlertDialogContent,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\nconst FormSchema = z.object({\n  title: z.string().min(1, 'Title is required.'),\n  description: z.string().min(1, 'Description is required.'),\n  announcement: z.string().optional(),\n  genre: z.string().min(1, 'Enter at least one genre.'),\n  audience: z.enum(['Kids', 'Teens', 'Adults']),\n  rating: z.coerce.number().min(0).max(5),\n  status: z.enum(['Airing', 'Finished', 'Upcoming']),\n  imageUrl: z.string().min(1, 'Image is required.'),\n  trailerUrl: z.string().url('Must be a valid URL.').optional().or(z.literal('')), \n  isFeatured: z.boolean(),\n});\n\ntype FormData = z.infer<typeof FormSchema>;\n\nexport default function EditAnimePage() {\n  const params = useParams();\n  const router = useRouter();\n  const { toast } = useToast();\n  const animeId = typeof params.id === 'string' ? params.id : '';\n  \n  const [anime, setAnime] = useState<Anime | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [seasons, setSeasons] = useState<Season[]>([]);\n  const [newSeasonTitle, setNewSeasonTitle] = useState('');\n\n  const [imagePreview, setImagePreview] = useState<string | null>(null);\n  const [imageBase64, setImageBase64] = useState<string | null>(null);\n\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\n  const [episodeToDelete, setEpisodeToDelete] = useState<{ seasonId: string; episodeId: string; episodeTitle: string } | null>(null);\n  const [seasonToDelete, setSeasonToDelete] = useState<Season | null>(null);\n\n\n  const [isEpisodeDialogOpen, setIsEpisodeDialogOpen] = useState(false);\n  const [editingEpisode, setEditingEpisode] = useState<Episode | null>(null);\n\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      announcement: '',\n      genre: '',\n      audience: 'Teens',\n      rating: 0,\n      status: 'Airing',\n      imageUrl: '',\n      trailerUrl: '',\n      isFeatured: false,\n    },\n  });\n  \n  const fetchAnimeData = () => {\n     if (animeId) {\n      setLoading(true);\n      api.getAnimeById(animeId)\n        .then(data => {\n          if (data) {\n            setAnime(data);\n            setSeasons(data.seasons || []);\n            form.reset({\n              title: data.title,\n              description: data.description,\n              announcement: data.announcement || '',\n              genre: (data.genres || []).map(g => g.name).join(', '),\n              audience: data.audience,\n              rating: data.rating,\n              status: data.status,\n              imageUrl: data.imageUrl,\n              trailerUrl: data.trailerUrl || '',\n              isFeatured: data.isFeatured || false,\n            });\n            setImagePreview(data.imageUrl);\n            setImageBase64(null);\n\n          } else {\n            notFound();\n          }\n        })\n        .catch(console.error)\n        .finally(() => setLoading(false));\n    }\n  }\n\n  useEffect(() => {\n    fetchAnimeData();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animeId]);\n  \n  const fileToDataUri = (file: File): Promise<string> => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as string);\n    reader.onerror = reject;\n    reader.readAsDataURL(file);\n  });\n\n  if (loading) {\n    return <div className=\"flex h-full w-full items-center justify-center\"><Loader2 className=\"h-8 w-8 animate-spin\" /></div>;\n  }\n\n  if (!anime) {\n    return notFound();\n  }\n  \n  const handleFormSubmit = async (data: FormData) => {\n    const updatedAnimeData = { \n        ...data, \n        genre: data.genre.split(',').map(s => s.trim()).filter(Boolean),\n        imageBase64: imageBase64,\n    };\n    \n    try {\n      const updatedAnime = await api.updateAnime(anime.id, updatedAnimeData);\n      toast({ title: \"Success\", description: \"Anime details updated successfully.\" });\n      setImageBase64(null);\n       if (updatedAnime.imageUrl) {\n        setImagePreview(updatedAnime.imageUrl);\n        form.setValue('imageUrl', updatedAnime.imageUrl);\n      }\n    } catch (error: any) {\n      toast({ variant: 'destructive', title: 'Error', description: `Failed to update anime: ${error.message}` });\n    }\n  };\n\n  const handleAddSeason = async () => {\n    if (!newSeasonTitle.trim()) return;\n    const newSeasonData: Omit<Season, 'id'|'episodes'|'animeId'> = { title: newSeasonTitle };\n    try {\n        const newSeason = await api.addSeason(anime.id, newSeasonData);\n        setSeasons([...seasons, newSeason]);\n        setNewSeasonTitle('');\n        toast({ title: \"Success\", description: \"Season added.\" });\n    } catch (error) {\n        toast({ variant: 'destructive', title: 'Error', description: 'Failed to add season.' });\n    }\n  };\n\n  const handleDeleteSeason = async () => {\n    if (!seasonToDelete) return;\n    // This is a placeholder, you'll need to implement api.deleteSeason\n    // await api.deleteSeason(anime.id, seasonToDelete.id);\n    console.log(\"Deleting season (API call not implemented)\", seasonToDelete.id);\n    setSeasons(seasons.filter(s => s.id !== seasonToDelete.id));\n    toast({ title: \"Success\", description: `Season \"${seasonToDelete.title}\" deleted.`});\n    setSeasonToDelete(null);\n  }\n  \n  const openEpisodeDialog = (seasonId: string, episode: Episode | null = null) => {\n    setEditingEpisode(episode);\n    // You might want to pass seasonId to the dialog if it's needed for creating a new episode\n    setIsEpisodeDialogOpen(true);\n  }\n\n  const openDeleteDialog = (seasonId: string, episodeId: string, episodeTitle: string) => {\n    setEpisodeToDelete({ seasonId, episodeId, episodeTitle });\n    setIsAlertOpen(true);\n  };\n\n  const handleDeleteEpisode = async () => {\n    if (!episodeToDelete) return;\n    try {\n      await api.deleteEpisode(anime.id, episodeToDelete.seasonId, episodeToDelete.episodeId);\n      setSeasons(seasons.map(s => \n        s.id === episodeToDelete.seasonId \n        ? { ...s, episodes: s.episodes.filter(e => e.id !== episodeToDelete.episodeId) } \n        : s\n      ));\n      toast({ title: \"Success\", description: \"Episode deleted successfully.\" });\n    } catch (error) {\n      toast({ variant: 'destructive', title: \"Error\", description: \"Failed to delete episode.\" });\n    } finally {\n      setIsAlertOpen(false);\n      setEpisodeToDelete(null);\n    }\n  };\n\n  const handleEpisodeSave = async (episodeData: Partial<Omit<Episode, 'id' | 'seasonId'>>) => {\n    try {\n      let savedEpisode: Episode;\n      if (editingEpisode) { // Update existing\n        savedEpisode = await api.updateEpisode(animeId, editingEpisode.seasonId, editingEpisode.id, episodeData);\n         setSeasons(prevSeasons => prevSeasons.map(season => \n            season.id === savedEpisode.seasonId \n            ? { ...season, episodes: season.episodes.map(ep => ep.id === savedEpisode.id ? savedEpisode : ep) }\n            : season\n        ));\n        toast({ title: \"Success\", description: \"Episode updated successfully.\" });\n      } else { // Create new\n        // Assuming you pass the seasonId to the dialog, or have it available here\n        const seasonId = episodeData.seasonId; // Make sure this is passed correctly\n        if(!seasonId) throw new Error(\"Season ID is missing to add a new episode.\");\n        savedEpisode = await api.addEpisode(animeId, seasonId, episodeData as Omit<Episode, 'id' | 'seasonId' | 'comments'>);\n        setSeasons(prevSeasons => prevSeasons.map(season => \n            season.id === savedEpisode.seasonId \n            ? { ...season, episodes: [...season.episodes, savedEpisode] }\n            : season\n        ));\n        toast({ title: \"Success\", description: \"Episode added successfully.\" });\n      }\n      setIsEpisodeDialogOpen(false);\n      setEditingEpisode(null);\n    } catch (error: any) {\n        toast({ variant: 'destructive', title: \"Error\", description: `Failed to save episode: ${error.message}` });\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <Button variant=\"outline\" onClick={() => router.push('/admin/manage-anime')}>\n        <ArrowLeft className=\"mr-2 h-4 w-4\" />\n        Back to Anime List\n      </Button>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 items-start\">\n        <div className=\"lg:col-span-2 space-y-8\">\n            <Card>\n                <CardHeader>\n                    <CardTitle>Edit Anime Details</CardTitle>\n                    <CardDescription>Make changes to the main information of the series.</CardDescription>\n                </CardHeader>\n                <CardContent>\n                    <Form {...form}>\n                        <form onSubmit={form.handleSubmit(handleFormSubmit)} className=\"space-y-4\">\n                            <FormField control={form.control} name=\"title\" render={({ field }) => ( <FormItem><FormLabel>Title</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem> )} />\n                            <FormField control={form.control} name=\"description\" render={({ field }) => ( <FormItem><FormLabel>Description</FormLabel><FormControl><Textarea {...field} /></FormControl><FormMessage /></FormItem> )} />\n                            <FormField control={form.control} name=\"announcement\" render={({ field }) => ( <FormItem><FormLabel>Announcement (Optional)</FormLabel><FormControl><Textarea {...field} placeholder=\"e.g. New season coming soon!\" /></FormControl><FormMessage /></FormItem> )} />\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                <FormField control={form.control} name=\"genre\" render={({ field }) => ( <FormItem><FormLabel>Genres (comma-separated)</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem> )} />\n                                <FormField control={form.control} name=\"rating\" render={({ field }) => ( <FormItem><FormLabel>Rating (0-5)</FormLabel><FormControl><Input type=\"number\" step=\"0.1\" {...field} /></FormControl><FormMessage /></FormItem> )} />\n                            </div>\n                             <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                <FormField control={form.control} name=\"audience\" render={({ field }) => ( <FormItem><FormLabel>Audience</FormLabel><Select onValueChange={field.onChange} defaultValue={field.value}><FormControl><SelectTrigger><SelectValue /></SelectTrigger></FormControl><SelectContent><SelectItem value=\"Kids\">Kids</SelectItem><SelectItem value=\"Teens\">Teens</SelectItem><SelectItem value=\"Adults\">Adults</SelectItem></SelectContent></Select><FormMessage /></FormItem>)} />\n                                <FormField control={form.control} name=\"status\" render={({ field }) => ( <FormItem><FormLabel>Status</FormLabel><Select onValueChange={field.onChange} defaultValue={field.value}><FormControl><SelectTrigger><SelectValue /></SelectTrigger></FormControl><SelectContent><SelectItem value=\"Airing\">Airing</SelectItem><SelectItem value=\"Finished\">Finished</SelectItem><SelectItem value=\"Upcoming\">Upcoming</SelectItem></SelectContent></Select><FormMessage /></FormItem>)} />\n                             </div>\n                             \n                             <FormField\n                                control={form.control}\n                                name=\"imageUrl\"\n                                render={({ field }) => (\n                                    <FormItem>\n                                        <FormLabel>Image</FormLabel>\n                                        {imagePreview && (\n                                            <div className=\"relative aspect-video w-full max-w-sm rounded-md overflow-hidden my-2\">\n                                                <Image src={imagePreview} alt=\"Image Preview\" fill objectFit=\"cover\" />\n                                            </div>\n                                        )}\n                                        <Tabs defaultValue=\"url\" className=\"w-full\">\n                                            <TabsList>\n                                                <TabsTrigger value=\"url\">URL</TabsTrigger>\n                                                <TabsTrigger value=\"upload\">Upload</TabsTrigger>\n                                            </TabsList>\n                                            <TabsContent value=\"url\">\n                                                <FormControl>\n                                                    <Input \n                                                        placeholder=\"https://example.com/image.png\" \n                                                        value={field.value?.startsWith('blob:') || field.value?.startsWith('data:') ? '' : field.value}\n                                                        onChange={(e) => {\n                                                            field.onChange(e);\n                                                            setImagePreview(e.target.value);\n                                                            setImageBase64(null);\n                                                        }}\n                                                    />\n                                                </FormControl>\n                                            </TabsContent>\n                                            <TabsContent value=\"upload\">\n                                                <FormControl>\n                                                    <Input\n                                                        type=\"file\"\n                                                        accept=\"image/*\"\n                                                        onChange={async (e) => {\n                                                            const file = e.target.files?.[0];\n                                                            if (file) {\n                                                                const previewUrl = URL.createObjectURL(file);\n                                                                const dataUri = await fileToDataUri(file);\n                                                                setImagePreview(previewUrl);\n                                                                setImageBase64(dataUri);\n                                                                form.setValue('imageUrl', previewUrl, { shouldValidate: true });\n                                                            }\n                                                        }}\n                                                    />\n                                                </FormControl>\n                                            </TabsContent>\n                                        </Tabs>\n                                        <FormMessage />\n                                    </FormItem>\n                                )}\n                            />\n\n                             <FormField control={form.control} name=\"trailerUrl\" render={({ field }) => ( <FormItem><FormLabel>YouTube Trailer URL</FormLabel><FormControl><Input {...field} placeholder=\"https://youtube.com/watch?v=...\" /></FormControl><FormMessage /></FormItem> )} />\n                             \n                             <FormField\n                                control={form.control}\n                                name=\"isFeatured\"\n                                render={({ field }) => (\n                                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm mt-4\">\n                                    <div className=\"space-y-0.5\">\n                                        <FormLabel>Featured Anime</FormLabel>\n                                        <p className=\"text-xs text-muted-foreground\">\n                                          Featured animes appear at the top of the dashboard.\n                                        </p>\n                                    </div>\n                                    <FormControl>\n                                        <Switch\n                                        checked={field.value}\n                                        onCheckedChange={field.onChange}\n                                        />\n                                    </FormControl>\n                                    </FormItem>\n                                )}\n                                />\n\n                            <div className=\"flex justify-end\">\n                                <Button type=\"submit\"><Save className=\"mr-2 h-4 w-4\"/>Save Changes</Button>\n                            </div>\n                        </form>\n                    </Form>\n                </CardContent>\n            </Card>\n        </div>\n        <div className=\"space-y-8\">\n            <Card>\n                <CardHeader>\n                    <CardTitle>Manage Seasons & Episodes</CardTitle>\n                    <CardDescription>Add or remove seasons and episodes for this anime.</CardDescription>\n                </CardHeader>\n                <CardContent>\n                    <div className=\"space-y-4\">\n                        <div className=\"flex gap-2\">\n                            <Input placeholder=\"New Season Title (e.g., Season 3)\" value={newSeasonTitle} onChange={e => setNewSeasonTitle(e.target.value)} />\n                            <Button onClick={handleAddSeason}><PlusCircle className=\"h-4 w-4\" /></Button>\n                        </div>\n                        <Accordion type=\"single\" collapsible className=\"w-full\" defaultValue='item-0'>\n                            {seasons.map((season, index) => (\n                                <AccordionItem value={`item-${index}`} key={season.id}>\n                                    <AccordionTrigger>{season.title}</AccordionTrigger>\n                                    <AccordionContent>\n                                        <div className=\"space-y-3 p-2\">\n                                            {season.episodes.length > 0 ? season.episodes.map(episode => (\n                                                <div key={episode.id} className=\"flex justify-between items-center text-sm p-2 rounded-md bg-muted/50\">\n                                                    <div>\n                                                        <span className=\"font-medium\">{episode.title}</span>\n                                                        <span className=\"text-muted-foreground\"> ({episode.duration} min)</span>\n                                                    </div>\n                                                    <div className=\"flex items-center\">\n                                                      <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\" onClick={() => openEpisodeDialog(season.id, episode)}>\n                                                          <Pencil className=\"h-4 w-4\" />\n                                                      </Button>\n                                                      <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\" onClick={() => openDeleteDialog(season.id, episode.id, episode.title)}>\n                                                          <Trash className=\"h-4 w-4 text-destructive\" />\n                                                      </Button>\n                                                    </div>\n                                                </div>\n                                            )) : <p className=\"text-sm text-muted-foreground text-center\">No episodes added yet.</p>}\n                                            \n                                            <Separator className=\"my-4\" />\n\n                                            <div className=\"flex justify-center\">\n                                                <Button size=\"sm\" onClick={() => openEpisodeDialog(season.id, null)}><PlusCircle className=\"mr-2 h-4 w-4\" />Add Episode</Button>\n                                            </div>\n                                        </div>\n                                    </AccordionContent>\n                                </AccordionItem>\n                            ))}\n                        </Accordion>\n                         {seasons.length === 0 && <p className=\"text-sm text-muted-foreground text-center pt-4\">No seasons added yet.</p>}\n                    </div>\n                </CardContent>\n            </Card>\n            \n            {anime && <CommentSection initialComments={(anime.comments || [])} animeId={anime.id} />}\n        </div>\n      </div>\n      \n      <AlertDialog open={isAlertOpen} onOpenChange={setIsAlertOpen}>\n        <AlertDialogContent>\n            <AlertDialogHeader>\n                <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n                <AlertDialogDescription>\n                    This will permanently delete the episode \"{episodeToDelete?.episodeTitle}\". This action cannot be undone.\n                </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n                <AlertDialogCancel onClick={() => setEpisodeToDelete(null)}>Cancel</AlertDialogCancel>\n                <AlertDialogAction onClick={handleDeleteEpisode} className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\">\n                    Delete Episode\n                </AlertDialogAction>\n            </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {isEpisodeDialogOpen && <EpisodeDialog \n        isOpen={isEpisodeDialogOpen}\n        onOpenChange={setIsEpisodeDialogOpen}\n        episode={editingEpisode}\n        onSave={handleEpisodeSave}\n      />}\n\n    </div>\n  );\n}\n\n"
    },
    {
      "path": "src/app/(app)/admin/manage-users/page.tsx",
      "content": "\"use client\";\n\nexport const dynamic = 'force-dynamic';\n\nimport { useState, useEffect, useMemo } from 'react';\nimport type { User } from '@/lib/types';\nimport * as api from '@/lib/api';\nimport { Button } from '@/components/ui/button';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuPortal\n} from '@/components/ui/dropdown-menu';\nimport {\n    AlertDialog,\n    AlertDialogAction,\n    AlertDialogCancel,\n    AlertDialogContent,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\"\nimport { MoreHorizontal, Trash, Loader2, Crown, ShieldCheck, UserCog, Ban, CheckCircle, UserX, Shield, Search } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { format } from 'date-fns';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/use-auth';\nimport { cn } from '@/lib/utils';\nimport { Input } from '@/components/ui/input';\n\nconst getInitials = (name: string) => {\n  return name.split(' ').map(n => n[0]).join('').toUpperCase();\n};\n\nexport default function ManageUsersPage() {\n  const [users, setUsers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\n  const [userToAction, setUserToAction] = useState<User | null>(null);\n  const [actionType, setActionType] = useState<'delete' | 'changeRole' | 'changeStatus' | null>(null);\n  const [newData, setNewData] = useState<Partial<User> | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const { user: currentUser } = useAuth();\n  const { toast } = useToast();\n\n  const fetchUsers = (query?: string) => {\n    setLoading(true);\n    api.getUsers(query)\n      .then(data => setUsers(data.sort((a, b) => {\n          const roleOrder = { owner: 0, 'co-owner': 1, admin: 2, user: 3 };\n          return roleOrder[a.role] - roleOrder[b.role];\n      })))\n      .catch(console.error)\n      .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    const debounceTimer = setTimeout(() => {\n        fetchUsers(searchTerm);\n    }, 300);\n\n    return () => clearTimeout(debounceTimer);\n  }, [searchTerm]);\n\n  const openConfirmationDialog = (user: User, type: 'delete' | 'changeRole' | 'changeStatus', data?: Partial<User>) => {\n      setUserToAction(user);\n      setActionType(type);\n      if (data) setNewData(data);\n      setIsAlertOpen(true);\n  };\n  \n  const handleConfirmAction = async () => {\n    if (!userToAction || !actionType) return;\n\n    try {\n        let updatedUser: User | null = null;\n        if (actionType === 'delete') {\n            await api.deleteUser(userToAction.id);\n            setUsers(users.filter(u => u.id !== userToAction.id));\n            toast({ title: \"Success\", description: \"User deleted successfully.\" });\n        } else if (actionType === 'changeRole' && newData?.role) {\n            updatedUser = await api.updateUserRole(userToAction.id, newData.role);\n            toast({ title: \"Success\", description: \"User role updated successfully.\"});\n        } else if (actionType === 'changeStatus' && newData?.status) {\n            updatedUser = await api.updateUserStatus(userToAction.id, newData.status);\n            toast({ title: \"Success\", description: `User has been ${newData.status}.` });\n        }\n        if (updatedUser) {\n             setUsers(users.map(u => u.id === userToAction.id ? updatedUser! : u));\n        }\n    } catch (error: any) {\n        toast({ variant: 'destructive', title: \"Error\", description: error.message || \"An unexpected error occurred.\" });\n    } finally {\n        setIsAlertOpen(false);\n        setUserToAction(null);\n        setActionType(null);\n        setNewData(null);\n    }\n  };\n\n  const getDialogContent = () => {\n      if (!userToAction) return { title: '', description: '', actionText: ''};\n      switch(actionType) {\n        case 'delete':\n            return {\n                title: `Are you sure you want to delete ${userToAction.name}?`,\n                description: \"This action cannot be undone. This will permanently delete the user's account.\",\n                actionText: \"Delete\",\n            }\n        case 'changeRole':\n            return {\n                title: `Confirm Role Change`,\n                description: `Are you sure you want to change ${userToAction.name}'s role to ${newData?.role}?`,\n                actionText: \"Confirm\",\n            }\n        case 'changeStatus':\n             return {\n                title: `Confirm Status Change`,\n                description: `Are you sure you want to ${newData?.status === 'disabled' ? 'disable' : 'enable'} ${userToAction.name}'s account?`,\n                actionText: newData?.status === 'disabled' ? 'Disable' : 'Enable',\n            }\n        default:\n            return { title: '', description: '', actionText: '' };\n      }\n  }\n  \n  const canPerformActions = (targetUser: User) => {\n    if (!currentUser) return false;\n    if (currentUser.id === targetUser.id || targetUser.role === 'owner') return false;\n    if (currentUser.role === 'owner') return true;\n    if (currentUser.role === 'co-owner' && targetUser.role !== 'co-owner') return true;\n    return false;\n  };\n\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex flex-col items-start gap-4 sm:flex-row sm:items-center sm:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold font-headline\">Manage Users</h1>\n          <p className=\"text-muted-foreground\">View and manage user accounts.</p>\n        </div>\n      </div>\n\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground\" />\n        <Input \n          placeholder=\"Search for a user by name or email...\"\n          className=\"pl-10 text-base\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n      </div>\n\n      <div className=\"border rounded-lg\">\n        <div className=\"relative w-full overflow-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>User</TableHead>\n                <TableHead>Role</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Date Joined</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {loading ? (\n                 <TableRow>\n                    <TableCell colSpan={5} className=\"h-24 text-center\">\n                        <Loader2 className=\"h-6 w-6 animate-spin mx-auto\" />\n                    </TableCell>\n                </TableRow>\n              ) : users.length > 0 ? users.map(user => (\n                <TableRow key={user.id} className={cn(user.status === 'disabled' && 'bg-muted/50 text-muted-foreground')}>\n                  <TableCell>\n                    <div className=\"flex items-center gap-3\">\n                      <Avatar>\n                          <AvatarImage src={user.avatarUrl || `https://placehold.co/40x40.png`} alt={user.name} />\n                          <AvatarFallback>{getInitials(user.name)}</AvatarFallback>\n                      </Avatar>\n                      <div>\n                          <div className=\"font-medium flex items-center gap-2\">\n                              {user.name} \n                              {user.role === 'owner' && <Crown className=\"h-4 w-4 text-yellow-400\" />}\n                          </div>\n                          <div className=\"text-sm\">{user.email}</div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={user.role === 'owner' ? 'default' : 'secondary'} className=\"capitalize\">\n                      {user.role}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                      <Badge variant={user.status === 'active' ? 'secondary' : 'destructive'} className=\"capitalize\">\n                          {user.status}\n                      </Badge>\n                  </TableCell>\n                  <TableCell>{format(new Date(user.joined), 'PPP')}</TableCell>\n                  <TableCell className=\"text-right\">\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" className=\"h-8 w-8 p-0\" disabled={!canPerformActions(user)}>\n                          <span className=\"sr-only\">Open menu</span>\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                         <DropdownMenuItem onClick={() => openConfirmationDialog(user, 'changeStatus', { status: user.status === 'active' ? 'disabled' : 'active' })}>\n                            {user.status === 'active' ? <><Ban className=\"mr-2 h-4 w-4\" /> Disable Account</> : <><CheckCircle className=\"mr-2 h-4 w-4\" /> Enable Account</>}\n                         </DropdownMenuItem>\n\n                         <DropdownMenuSub>\n                            <DropdownMenuSubTrigger>\n                                <Shield className=\"mr-2 h-4 w-4\" /> Change Role\n                            </DropdownMenuSubTrigger>\n                            <DropdownMenuPortal>\n                                <DropdownMenuSubContent>\n                                    <DropdownMenuItem onClick={() => openConfirmationDialog(user, 'changeRole', { role: 'admin' })}><UserCog className=\"mr-2 h-4 w-4\" /> Set as Admin</DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => openConfirmationDialog(user, 'changeRole', { role: 'user' })}><UserX className=\"mr-2 h-4 w-4\" /> Set as User</DropdownMenuItem>\n                                    {currentUser?.role === 'owner' && <DropdownMenuItem onClick={() => openConfirmationDialog(user, 'changeRole', { role: 'co-owner' })}><ShieldCheck className=\"mr-2 h-4 w-4\" /> Set as Co-Owner</DropdownMenuItem>}\n                                </DropdownMenuSubContent>\n                            </DropdownMenuPortal>\n                         </DropdownMenuSub>\n\n                         <DropdownMenuSeparator />\n                         <DropdownMenuItem className=\"text-destructive focus:bg-destructive/10 focus:text-destructive\" onClick={() => openConfirmationDialog(user, 'delete')}>\n                           <Trash className=\"mr-2 h-4 w-4\" /> Delete User\n                         </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </TableCell>\n                </TableRow>\n              )) : (\n                <TableRow>\n                    <TableCell colSpan={5} className=\"h-24 text-center\">\n                        No users found for \"{searchTerm}\".\n                    </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </div>\n      </div>\n      \n      <AlertDialog open={isAlertOpen} onOpenChange={setIsAlertOpen}>\n        <AlertDialogContent>\n            <AlertDialogHeader>\n                <AlertDialogTitle>{getDialogContent().title}</AlertDialogTitle>\n                <AlertDialogDescription>\n                   {getDialogContent().description}\n                </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                <AlertDialogAction onClick={handleConfirmAction} className={actionType === 'delete' || (actionType === 'changeStatus' && newData?.status === 'disabled') ? \"bg-destructive text-destructive-foreground hover:bg-destructive/90\" : \"\"}>\n                    {getDialogContent().actionText}\n                </AlertDialogAction>\n            </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n"
    },
    {
      "path": "src/app/(app)/admin/manage-allies/page.tsx",
      "content": "\"use client\";\n\nexport const dynamic = 'force-dynamic';\n\nimport { useState, useEffect } from 'react';\nimport type { Ally } from '@/lib/types';\nimport * as api from '@/lib/api';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n    AlertDialog,\n    AlertDialogAction,\n    AlertDialogCancel,\n    AlertDialogContent,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\"\nimport { PlusCircle, Trash, Pencil, Star, Loader2 } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport Image from 'next/image';\nimport { AllyDialog } from '@/components/ally-dialog';\n\nexport default function ManageAlliesPage() {\n    const [allies, setAllies] = useState<Ally[]>([]);\n    const [loading, setLoading] = useState(true);\n    const [isDialogOpen, setIsDialogOpen] = useState(false);\n    const [editingAlly, setEditingAlly] = useState<Ally | null>(null);\n    const [isAlertOpen, setIsAlertOpen] = useState(false);\n    const [allyToDelete, setAllyToDelete] = useState<Ally | null>(null);\n    const { toast } = useToast();\n\n    const fetchAllies = () => {\n        setLoading(true);\n        api.getAllies()\n            .then(data => setAllies(data))\n            .catch(console.error)\n            .finally(() => setLoading(false));\n    };\n\n    useEffect(() => {\n        fetchAllies();\n    }, []);\n\n    const handleOpenDialog = (ally: Ally | null = null) => {\n        setEditingAlly(ally);\n        setIsDialogOpen(true);\n    };\n\n    const handleOpenAlert = (ally: Ally) => {\n        setAllyToDelete(ally);\n        setIsAlertOpen(true);\n    };\n\n    const handleSave = async (data: Omit<Ally, 'id'> & { imageBase64?: string | null }) => {\n        try {\n            if (editingAlly) {\n                await api.updateAlly(editingAlly.id, data);\n                toast({ title: \"Success\", description: \"Ally updated successfully.\" });\n            } else {\n                await api.addAlly(data);\n                toast({ title: \"Success\", description: \"Ally added successfully.\" });\n            }\n            setIsDialogOpen(false);\n            setEditingAlly(null);\n            fetchAllies();\n        } catch (error: any) {\n            toast({ variant: 'destructive', title: \"Error\", description: `Failed to save ally: ${error.message}` });\n        }\n    };\n\n    const handleDelete = async () => {\n        if (!allyToDelete) return;\n        try {\n            await api.deleteAlly(allyToDelete.id);\n            setAllies(allies.filter(a => a.id !== allyToDelete.id));\n            toast({ title: \"Success\", description: \"Ally deleted successfully.\" });\n        } catch (error) {\n            toast({ variant: 'destructive', title: \"Error\", description: \"Failed to delete ally.\" });\n        } finally {\n            setIsAlertOpen(false);\n            setAllyToDelete(null);\n        }\n    };\n\n    if (loading) {\n        return <div className=\"flex h-full w-full items-center justify-center\"><Loader2 className=\"h-8 w-8 animate-spin\" /></div>;\n    }\n\n    return (\n        <div className=\"space-y-8\">\n            <div className=\"flex items-center justify-between\">\n                <div>\n                    <h1 className=\"text-3xl font-bold font-headline\">Manage Allies</h1>\n                    <p className=\"text-muted-foreground\">Add, edit, or delete allies.</p>\n                </div>\n                <Button onClick={() => handleOpenDialog()}>\n                    <PlusCircle className=\"mr-2 h-4 w-4\" /> Add New Ally\n                </Button>\n            </div>\n\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n                {allies.map(ally => (\n                    <Card key={ally.id} className=\"flex flex-col\">\n                        <CardHeader className=\"items-center text-center\">\n                            <Image src={ally.imageUrl} alt={ally.name} width={80} height={80} className=\"rounded-full aspect-square object-cover\" />\n                            <CardTitle className=\"mt-4\">{ally.name}</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"flex-grow text-center\">\n                            <p className=\"text-sm text-muted-foreground\">{ally.description}</p>\n                        </CardContent>\n                        <CardFooter className=\"flex justify-between items-center\">\n                           {ally.isFeatured && <Star className=\"h-5 w-5 text-yellow-400 fill-current\" />}\n                           <div className=\"flex gap-2 ml-auto\">\n                             <Button variant=\"outline\" size=\"sm\" onClick={() => handleOpenDialog(ally)}>\n                                <Pencil className=\"mr-2 h-3 w-3\" /> Edit\n                            </Button>\n                            <Button variant=\"destructive\" size=\"sm\" onClick={() => handleOpenAlert(ally)}>\n                                <Trash className=\"mr-2 h-3 w-3\" /> Delete\n                            </Button>\n                           </div>\n                        </CardFooter>\n                    </Card>\n                ))}\n            </div>\n            {allies.length === 0 && (\n                 <div className=\"col-span-full py-12 text-center text-muted-foreground\">\n                    <p>No allies added yet. Click \"Add New Ally\" to get started.</p>\n                </div>\n            )}\n\n            <AllyDialog\n                isOpen={isDialogOpen}\n                onOpenChange={setIsDialogOpen}\n                onSave={handleSave}\n                ally={editingAlly}\n            />\n\n            <AlertDialog open={isAlertOpen} onOpenChange={setIsAlertOpen}>\n                <AlertDialogContent>\n                    <AlertDialogHeader>\n                        <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n                        <AlertDialogDescription>\n                            This will permanently delete the ally \"{allyToDelete?.name}\". This action cannot be undone.\n                        </AlertDialogDescription>\n                    </AlertDialogHeader>\n                    <AlertDialogFooter>\n                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                        <AlertDialogAction onClick={handleDelete} className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\">\n                            Delete\n                        </AlertDialogAction>\n                    </AlertDialogFooter>\n                </AlertDialogContent>\n            </AlertDialog>\n        </div>\n    );\n}\n"
    },
    {
      "path": "src/app/(app)/admin/staff-chat/page.tsx",
      "content": "\"use client\";\n\nexport const dynamic = 'force-dynamic';\n\nimport { useState, useEffect, useRef } from 'react';\nimport type { StaffChatMessage } from '@/lib/types';\nimport * as api from '@/lib/api';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Loader2, Send, Paperclip, Reply, X, Image as ImageIcon, Trash, Pencil, Check, MessageSquareWarning } from 'lucide-react';\nimport { format } from 'date-fns';\nimport { useToast } from '@/hooks/use-toast';\nimport { cn } from '@/lib/utils';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport {\n    AlertDialog,\n    AlertDialogAction,\n    AlertDialogCancel,\n    AlertDialogContent,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\nconst getInitials = (name?: string) => {\n    if (!name) return 'U';\n    return name.split(' ').map((n) => n[0]).join('').toUpperCase();\n};\n\nconst fileToDataUri = (file: File): Promise<string> => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as string);\n    reader.onerror = reject;\n    reader.readAsDataURL(file);\n});\n\n\nexport default function StaffChatPage() {\n    const { user } = useAuth();\n    const { toast } = useToast();\n    const [messages, setMessages] = useState<StaffChatMessage[]>([]);\n    const [loading, setLoading] = useState(true);\n    const [isSending, setIsSending] = useState(false);\n    const scrollAreaRef = useRef<HTMLDivElement>(null);\n    const fileInputRef = useRef<HTMLInputElement>(null);\n\n    const [replyTo, setReplyTo] = useState<StaffChatMessage | null>(null);\n    const [mediaBase64, setMediaBase64] = useState<string | null>(null);\n    const [mediaPreview, setMediaPreview] = useState<string | null>(null);\n\n    const [editingMessage, setEditingMessage] = useState<StaffChatMessage | null>(null);\n    const [editedText, setEditedText] = useState(\"\");\n    const [deletingMessage, setDeletingMessage] = useState<StaffChatMessage | null>(null);\n\n    const fetchMessages = async () => {\n        try {\n            const fetchedMessages = await api.getStaffChatMessages();\n            setMessages(fetchedMessages);\n        } catch (error) {\n            toast({\n                variant: 'destructive',\n                title: 'Error',\n                description: 'Could not fetch chat messages.',\n            });\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchMessages();\n        const interval = setInterval(fetchMessages, 15000); // Poll every 15 seconds\n        return () => clearInterval(interval);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (scrollAreaRef.current) {\n            scrollAreaRef.current.scrollTo({\n                top: scrollAreaRef.current.scrollHeight,\n                behavior: 'smooth'\n            });\n        }\n    }, [messages]);\n    \n    const resetForm = () => {\n        setEditedText('');\n        setReplyTo(null);\n        setMediaBase64(null);\n        setMediaPreview(null);\n        if (fileInputRef.current) {\n            fileInputRef.current.value = '';\n        }\n    };\n\n    const handleSendMessage = async (e: React.FormEvent) => {\n        e.preventDefault();\n        const messageText = editedText; // Use editedText for both new and edited messages\n        if ((!messageText.trim() && !mediaBase64) || isSending) return;\n\n        setIsSending(true);\n        try {\n            if (editingMessage) {\n                const updatedMessage = await api.updateStaffChatMessage(editingMessage.id, messageText);\n                 setMessages(messages.map(m => m.id === updatedMessage.id ? updatedMessage : m));\n                 setEditingMessage(null);\n            } else {\n                 const sentMessage = await api.postStaffChatMessage({\n                    text: messageText,\n                    parentId: replyTo?.id,\n                    mediaBase64: mediaBase64,\n                });\n                setMessages((prev) => [...prev, sentMessage]);\n            }\n            resetForm();\n        } catch (error: any) {\n            toast({\n                variant: 'destructive',\n                title: 'Error',\n                description: error.message || 'Could not send message.',\n            });\n        } finally {\n            setIsSending(false);\n        }\n    };\n\n    const handleDeleteMessage = async () => {\n        if (!deletingMessage) return;\n        try {\n            await api.deleteStaffChatMessage(deletingMessage.id);\n            // Replace message with a deleted marker, or remove it if it has no replies\n            const hasReplies = messages.some(m => m.parent?.id === deletingMessage.id);\n            if(hasReplies) {\n                setMessages(prev => prev.map(m => m.id === deletingMessage.id ? { ...m, isDeleted: true, text: \"[deleted]\", mediaUrl: undefined } : m));\n            } else {\n                 setMessages(prev => prev.filter(m => m.id !== deletingMessage.id));\n            }\n            setDeletingMessage(null);\n        } catch (error: any) {\n            toast({ variant: 'destructive', title: 'Error', description: error.message || 'Could not delete message.' });\n        }\n    };\n    \n    const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (file) {\n            const previewUrl = URL.createObjectURL(file);\n            setMediaPreview(previewUrl);\n            const dataUri = await fileToDataUri(file);\n            setMediaBase64(dataUri);\n        }\n    };\n\n    const handleEditClick = (message: StaffChatMessage) => {\n        setEditingMessage(message);\n        setEditedText(message.text || '');\n        setReplyTo(null);\n    }\n\n    const cancelEdit = () => {\n        setEditingMessage(null);\n        setEditedText(\"\");\n    }\n\n    if (loading) {\n        return <div className=\"flex h-[calc(100vh-8rem)] w-full items-center justify-center\"><Loader2 className=\"h-8 w-8 animate-spin\" /></div>;\n    }\n\n    return (\n        <div className=\"flex h-[calc(100vh-4rem)] flex-col bg-background\">\n            <header className=\"border-b p-4\">\n                <h1 className=\"text-xl font-bold font-headline\">Staff Chat</h1>\n                <p className=\"text-sm text-muted-foreground\">Internal communication channel for administrators.</p>\n            </header>\n            <div className=\"flex-1 overflow-hidden\">\n                <ScrollArea className=\"h-full\" ref={scrollAreaRef}>\n                    <div className=\"p-4 space-y-4\">\n                        {messages.map((msg) => (\n                            <div\n                                key={msg.id}\n                                className={cn(\n                                    \"flex items-end gap-3 group\",\n                                    msg.author?.id === user?.id ? \"justify-end\" : \"justify-start\"\n                                )}\n                            >\n                                {msg.author?.id !== user?.id && !msg.isDeleted && (\n                                     <Link href={`/profile/${msg.author.username}`}>\n                                        <Avatar className=\"h-8 w-8\">\n                                            <AvatarImage src={msg.author?.avatarUrl} />\n                                            <AvatarFallback>{getInitials(msg.author?.name)}</AvatarFallback>\n                                        </Avatar>\n                                    </Link>\n                                )}\n                                <div className={cn(\"flex flex-col\", msg.author?.id === user?.id ? \"items-end\" : \"items-start\")}>\n                                     {!editingMessage && !msg.isDeleted && msg.author?.id === user?.id && (\n                                        <div className=\"hidden group-hover:flex mb-1 flex-row-reverse items-center\">\n                                            <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\" onClick={() => handleEditClick(msg)}><Pencil className=\"h-3 w-3\" /></Button>\n                                            <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6 text-destructive\" onClick={() => setDeletingMessage(msg)}><Trash className=\"h-3 w-3\" /></Button>\n                                            <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\" onClick={() => setReplyTo(msg)}><Reply className=\"h-4 w-4\" /></Button>\n                                        </div>\n                                    )}\n                                    <div\n                                        className={cn(\n                                            \"max-w-xs lg:max-w-md rounded-lg p-3 relative\",\n                                            msg.author?.id === user?.id ? \"bg-primary text-primary-foreground\" : \"bg-muted\"\n                                        )}\n                                    >\n                                        {msg.parent && (\n                                            <div className=\"border-l-2 border-primary-foreground/50 pl-2 mb-2 text-xs opacity-80\">\n                                                <p className=\"font-bold\">{msg.parent.author.name}</p>\n                                                <p className=\"truncate\">{msg.parent.isDeleted ? <i>[deleted]</i> : msg.parent.text}</p>\n                                            </div>\n                                        )}\n                                        {msg.author?.id !== user?.id && !msg.isDeleted && (\n                                            <p className=\"text-xs font-bold mb-1\">{msg.author?.name}</p>\n                                        )}\n                                        {msg.isDeleted ? (\n                                            <div className=\"flex items-center gap-2 italic text-sm opacity-70\">\n                                                <MessageSquareWarning className=\"h-4 w-4\" />\n                                                <span>This message was deleted.</span>\n                                            </div>\n                                        ) : (\n                                            <>\n                                                {msg.mediaUrl && <Image src={msg.mediaUrl} alt=\"chat media\" width={300} height={200} className=\"rounded-md my-2\" />}\n                                                {msg.text && <p className=\"text-sm whitespace-pre-wrap\">{msg.text}</p>}\n                                            </>\n                                        )}\n                                        <p className={cn(\"text-xs mt-2 text-right\", msg.author?.id === user?.id ? 'text-primary-foreground/70' : 'text-muted-foreground/70')}>\n                                            {format(new Date(msg.timestamp), 'HH:mm')}\n                                        </p>\n                                    </div>\n                                </div>\n                                 {msg.author?.id === user?.id && !msg.isDeleted && (\n                                    <Link href={`/profile/${msg.author.username}`}>\n                                        <Avatar className=\"h-8 w-8\">\n                                            <AvatarImage src={msg.author?.avatarUrl} />\n                                            <AvatarFallback>{getInitials(msg.author?.name)}</AvatarFallback>\n                                        </Avatar>\n                                    </Link>\n                                )}\n                            </div>\n                        ))}\n                    </div>\n                </ScrollArea>\n            </div>\n            <footer className=\"border-t p-4 space-y-2\">\n                 {editingMessage && (\n                    <div className=\"bg-muted p-2 rounded-lg text-sm flex justify-between items-center\">\n                        <div>\n                            <p className=\"font-semibold text-primary\">Editing message...</p>\n                        </div>\n                        <Button variant=\"ghost\" size=\"icon\" onClick={cancelEdit}><X className=\"h-4 w-4\" /></Button>\n                    </div>\n                )}\n                {replyTo && !editingMessage && (\n                    <div className=\"bg-muted p-2 rounded-lg text-sm flex justify-between items-center\">\n                        <div>\n                            <p className=\"font-semibold text-primary\">Replying to {replyTo.author?.name}</p>\n                            <p className=\"text-muted-foreground truncate\">{replyTo.text}</p>\n                        </div>\n                        <Button variant=\"ghost\" size=\"icon\" onClick={() => setReplyTo(null)}><X className=\"h-4 w-4\" /></Button>\n                    </div>\n                )}\n                 {mediaPreview && !editingMessage && (\n                    <div className=\"bg-muted p-2 rounded-lg flex justify-between items-center\">\n                        <div className=\"flex items-center gap-2\">\n                            <ImageIcon className=\"h-6 w-6 text-muted-foreground\" />\n                        </div>\n                        <Button variant=\"ghost\" size=\"icon\" onClick={() => { setMediaBase64(null); setMediaPreview(null); if(fileInputRef.current) fileInputRef.current.value = ''; }}>\n                            <X className=\"h-4 w-4\" />\n                        </Button>\n                    </div>\n                )}\n                <form onSubmit={handleSendMessage} className=\"flex items-center gap-2\">\n                    {!editingMessage && (\n                        <Button type=\"button\" variant=\"ghost\" size=\"icon\" onClick={() => fileInputRef.current?.click()}>\n                            <Paperclip className=\"h-5 w-5\"/>\n                            <span className=\"sr-only\">Attach file</span>\n                        </Button>\n                    )}\n                    <input type=\"file\" ref={fileInputRef} className=\"hidden\" accept=\"image/*\" onChange={handleFileChange} />\n                    <Textarea\n                        value={editedText}\n                        onChange={(e) => setEditedText(e.target.value)}\n                        placeholder={editingMessage ? \"Edit your message...\" : \"Type a message...\"}\n                        autoComplete=\"off\"\n                        disabled={isSending}\n                        rows={1}\n                        className=\"resize-none max-h-24\"\n                        onKeyDown={(e) => {\n                            if (e.key === 'Enter' && !e.shiftKey) {\n                                e.preventDefault();\n                                handleSendMessage(e);\n                            }\n                        }}\n                    />\n                    <Button type=\"submit\" size=\"icon\" disabled={(!editedText.trim() && !mediaBase64) || isSending}>\n                        {isSending ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : (editingMessage ? <Check className=\"h-4 w-4\" /> :<Send className=\"h-4 w-4\" />)}\n                        <span className=\"sr-only\">Send</span>\n                    </Button>\n                    {editingMessage && <Button type=\"button\" variant=\"ghost\" size=\"icon\" onClick={cancelEdit}><X className=\"h-4 w-4\"/></Button>}\n                </form>\n            </footer>\n\n            <AlertDialog open={!!deletingMessage} onOpenChange={(open) => !open && setDeletingMessage(null)}>\n                <AlertDialogContent>\n                    <AlertDialogHeader>\n                        <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                        <AlertDialogDescription>\n                            This will permanently delete this message. This action cannot be undone.\n                        </AlertDialogDescription>\n                    </AlertDialogHeader>\n                    <AlertDialogFooter>\n                        <AlertDialogCancel onClick={() => setDeletingMessage(null)}>Cancel</AlertDialogCancel>\n                        <AlertDialogAction onClick={handleDeleteMessage} className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\">\n                            Delete\n                        </AlertDialogAction>\n                    </AlertDialogFooter>\n                </AlertDialogContent>\n            </AlertDialog>\n        </div>\n    );\n}\n"
    },
    {
      "path": "src/app/(app)/admin/support-tickets/page.tsx",
      "content": "\"use client\";\n\nexport const dynamic = 'force-dynamic';\n\nimport { useState, useEffect } from 'react';\nimport type { SupportTicket } from '@/lib/types';\nimport * as api from '@/lib/api';\nimport { Button } from '@/components/ui/button';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Loader2, MoreHorizontal, CheckCircle, Archive, LifeBuoy, CircleDashed, User } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { formatDistanceToNow } from 'date-fns';\nimport { useToast } from '@/hooks/use-toast';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport Link from 'next/link';\n\nexport default function SupportTicketsPage() {\n  const [tickets, setTickets] = useState<SupportTicket[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    api.getSupportTickets()\n      .then(data => setTickets(data))\n      .catch(console.error)\n      .finally(() => setLoading(false));\n  }, []);\n\n  const handleUpdateStatus = async (ticketId: number, status: 'open' | 'closed' | 'in-progress') => {\n    try {\n      const updatedTicket = await api.updateTicketStatus(ticketId, status);\n      setTickets(tickets.map(t => (t.id === ticketId ? updatedTicket : t)));\n      toast({\n        title: 'Ticket Updated',\n        description: `Ticket #${ticketId} has been marked as ${status}.`,\n      });\n    } catch (error: any) {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: error.message || 'Failed to update ticket status.',\n      });\n    }\n  };\n\n  if (loading) {\n    return <div className=\"flex h-full w-full items-center justify-center\"><Loader2 className=\"h-8 w-8 animate-spin\" /></div>;\n  }\n  \n  const openTickets = tickets.filter(t => t.status === 'open').length;\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-bold font-headline flex items-center gap-2\">\n            <LifeBuoy />\n            Support Tickets\n        </h1>\n        <p className=\"text-muted-foreground\">Review and manage user support requests.</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n            <CardTitle>Inbox</CardTitle>\n            <CardDescription>\n                {openTickets > 0 \n                ? `You have ${openTickets} open ticket${openTickets !== 1 ? 's' : ''}.`\n                : 'Your inbox is clear.'\n                }\n            </CardDescription>\n        </CardHeader>\n        <CardContent>\n            <div className=\"border rounded-lg\">\n                <Table>\n                <TableHeader>\n                    <TableRow>\n                    <TableHead>User</TableHead>\n                    <TableHead>Subject</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Received</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                </TableHeader>\n                <TableBody>\n                    {tickets.length === 0 ? (\n                         <TableRow>\n                            <TableCell colSpan={5} className=\"h-24 text-center\">\n                                No tickets yet. Your inbox is clear!\n                            </TableCell>\n                        </TableRow>\n                    ) : tickets.map(ticket => (\n                    <TableRow key={ticket.id}>\n                        <TableCell>\n                            {ticket.user ? (\n                                <Link href={`/profile/${ticket.user.username}`} className=\"font-medium text-primary hover:underline\">\n                                    {ticket.user.name}\n                                </Link>\n                            ) : (\n                                <div className=\"font-medium\">{ticket.userEmail}</div>\n                            )}\n                        </TableCell>\n                        <TableCell>\n                            <div className=\"font-medium\">{ticket.subject}</div>\n                            <div className=\"text-sm text-muted-foreground line-clamp-2\">{ticket.message}</div>\n                        </TableCell>\n                        <TableCell>\n                        <Badge variant={ticket.status === 'open' ? 'destructive' : (ticket.status === 'in-progress' ? 'default' : 'secondary')} className=\"capitalize\">\n                            {ticket.status}\n                        </Badge>\n                        </TableCell>\n                        <TableCell>{formatDistanceToNow(new Date(ticket.timestamp), { addSuffix: true })}</TableCell>\n                        <TableCell className=\"text-right\">\n                        <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                                <span className=\"sr-only\">Open menu</span>\n                                <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => handleUpdateStatus(ticket.id, 'in-progress')}>\n                                <CircleDashed className=\"mr-2 h-4 w-4\" /> Mark as In Progress\n                            </DropdownMenuItem>\n                            <DropdownMenuItem onClick={() => handleUpdateStatus(ticket.id, 'closed')}>\n                                <Archive className=\"mr-2 h-4 w-4\" /> Mark as Closed\n                            </DropdownMenuItem>\n                             {ticket.status !== 'open' && (\n                                <DropdownMenuItem onClick={() => handleUpdateStatus(ticket.id, 'open')}>\n                                <CheckCircle className=\"mr-2 h-4 w-4\" /> Re-open Ticket\n                                </DropdownMenuItem>\n                             )}\n                            </DropdownMenuContent>\n                        </DropdownMenu>\n                        </TableCell>\n                    </TableRow>\n                    ))}\n                </TableBody>\n                </Table>\n            </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
    },
    {
      "path": "src/app/(auth)/layout.tsx",
      "content": "export default function AuthLayout({ children }: { children: React.ReactNode }) {\n  // Este layout no aplica ningún estilo ni componente, solo renderiza las páginas de autenticación.\n  return <>{children}</>;\n}\n"
    },
    {
      "path": "src/app/(auth)/login/page.tsx",
      "content": "\"use client\"\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Clapperboard, Loader2 } from 'lucide-react';\nimport Link from 'next/link';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\n\nexport default function LoginPage() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isAccountDisabled, setIsAccountDisabled] = useState(false);\n  const { login, isAuthenticated, user, loading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!authLoading && isAuthenticated) {\n        if (user && ['admin', 'co-owner', 'owner'].includes(user.role)) {\n            router.push('/admin');\n        } else {\n            router.push('/');\n        }\n    }\n  }, [isAuthenticated, authLoading, router, user]);\n  \n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setLoading(true);\n    setIsAccountDisabled(false);\n    try {\n      await login(email, password);\n    } catch (error: any) {\n      if (error.message === 'account-disabled') {\n        setIsAccountDisabled(true);\n      } else {\n        toast({\n          variant: 'destructive',\n          title: 'Login Failed',\n          description: error.message || 'Invalid email or password. Please try again.',\n        });\n      }\n    } finally {\n        setLoading(false);\n    }\n  };\n\n  if (authLoading || isAuthenticated) {\n    return (\n         <div className=\"flex h-screen w-full items-center justify-center bg-background\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n    )\n  }\n\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-sm\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mb-4 flex justify-center\">\n            <Clapperboard className=\"h-12 w-12 text-primary\" />\n          </div>\n          <CardTitle className=\"font-headline text-3xl\">Welcome to AnimeVerse</CardTitle>\n          <CardDescription>Sign in to continue</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isAccountDisabled && (\n            <Alert variant=\"destructive\" className=\"mb-4\">\n              <AlertTitle>Cuenta Deshabilitada</AlertTitle>\n              <AlertDescription>\n                Tu cuenta ha sido deshabilitada. Si crees que esto es un error, por favor{' '}\n                <Link href=\"/support/account-disabled\" className=\"font-bold underline\">\n                  contacta a soporte\n                </Link>\n                .\n              </AlertDescription>\n            </Alert>\n          )}\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"admin@animeverse.com\"\n                required\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                disabled={loading}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Link href=\"/forgot-password\" className=\"text-sm font-medium text-primary hover:underline\">\n                  ¿Olvidaste tu contraseña?\n                </Link>\n              </div>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"superadmin123\"\n                required\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                disabled={loading}\n              />\n            </div>\n            <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n              {loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Login\n            </Button>\n          </form>\n           <div className=\"mt-4 text-center text-sm\">\n            <p className=\"text-muted-foreground\">\n              ¿No tienes una cuenta?{\" \"}\n              <Link href=\"/register\" className=\"font-medium text-primary hover:underline\">\n                Regístrate\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
    },
    {
      "path": "src/app/(auth)/register/page.tsx",
      "content": "\"use client\"\n\nimport { useState } from 'react';\nimport Link from \"next/link\"\nimport { useRouter } from 'next/navigation';\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { useToast } from '@/hooks/use-toast';\nimport { Clapperboard, Loader2 } from 'lucide-react';\nimport * as api from '@/lib/api';\n\nexport default function RegisterPage() {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const router = useRouter();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!name || !email || !password) {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: 'Please fill in all fields.',\n      });\n      return;\n    }\n    setLoading(true);\n\n    try {\n      await api.register(name, email, password);\n      toast({\n        title: 'Registration Successful',\n        description: 'Welcome! Please log in to continue.',\n      });\n      router.push('/login');\n    } catch (error: any) {\n      toast({\n        variant: 'destructive',\n        title: 'Registration Failed',\n        description: error.message || 'An unexpected error occurred.',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-sm\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mb-4 flex justify-center\">\n            <Clapperboard className=\"h-12 w-12 text-primary\" />\n          </div>\n          <CardTitle className=\"font-headline text-3xl\">Create an Account</CardTitle>\n          <CardDescription>Enter your details to join AnimeVerse</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Name</Label>\n              <Input\n                id=\"name\"\n                type=\"text\"\n                placeholder=\"Your Name\"\n                required\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                disabled={loading}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"m@example.com\"\n                required\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                disabled={loading}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                required\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                disabled={loading}\n              />\n            </div>\n            <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n              {loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Create Account\n            </Button>\n          </form>\n          <div className=\"mt-4 text-center text-sm\">\n            <p className=\"text-muted-foreground\">\n              Already have an account?{\" \"}\n              <Link href=\"/login\" className=\"font-medium text-primary hover:underline\">\n                Login\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
    },
    {
      "path": "src/app/(auth)/forgot-password/page.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { z } from \"zod\"\nimport * as api from \"@/lib/api\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { Loader2, Mail } from \"lucide-react\"\nimport Link from \"next/link\"\n\nconst formSchema = z.object({\n  email: z.string().email({ message: \"Por favor, introduce una dirección de correo válida.\" }),\n})\n\nexport default function ForgotPasswordPage() {\n  const [loading, setLoading] = useState(false)\n  const [submitted, setSubmitted] = useState(false)\n  const { toast } = useToast()\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: \"\",\n    },\n  })\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setLoading(true)\n    try {\n      const response = await api.forgotPassword(values.email)\n      toast({\n        title: \"Petición Enviada\",\n        description: response.message,\n      })\n      setSubmitted(true)\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"No se pudo procesar la solicitud.\",\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-sm\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-2xl font-headline\">\n            <Mail className=\"h-6 w-6\" /> Recuperar Contraseña\n          </CardTitle>\n          <CardDescription>\n            {submitted\n              ? \"Revisa tu bandeja de entrada (y la carpeta de spam) para continuar.\"\n              : \"Introduce tu correo electrónico para recibir un enlace y restablecer tu contraseña.\"}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {submitted ? (\n            <div className=\"text-center\">\n              <Button asChild className=\"mt-4\">\n                <Link href=\"/login\">Volver a Iniciar Sesión</Link>\n              </Button>\n            </div>\n          ) : (\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"tu@email.com\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                  {loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Enviar Enlace de Recuperación\n                </Button>\n              </form>\n            </Form>\n          )}\n           <div className=\"mt-4 text-center text-sm\">\n            <Link href=\"/login\" className=\"text-muted-foreground hover:underline\">\n                Volver a Iniciar Sesión\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n"
    },
    {
      "path": "src/app/(auth)/reset-password/page.tsx",
      "content": "\"use client\"\n\nimport { useState, Suspense } from \"react\"\nimport { useSearchParams, useRouter } from \"next/navigation\"\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { z } from \"zod\"\nimport * as api from \"@/lib/api\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { Loader2, KeyRound } from \"lucide-react\"\nimport Link from \"next/link\"\n\nconst formSchema = z.object({\n  password: z.string().min(8, { message: \"La contraseña debe tener al menos 8 caracteres.\" }),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Las contraseñas no coinciden.\",\n  path: [\"confirmPassword\"],\n})\n\nfunction ResetPasswordForm() {\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  const token = searchParams.get(\"token\")\n\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const { toast } = useToast()\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { password: \"\", confirmPassword: \"\" },\n  })\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    if (!token) {\n      setError(\"Token no encontrado. Por favor, solicita un nuevo enlace.\");\n      return;\n    }\n    setLoading(true)\n    setError(null)\n    try {\n      const response = await api.resetPassword(token, values.password)\n      toast({\n        title: \"Éxito\",\n        description: response.message,\n      })\n      router.push(\"/login\")\n    } catch (err: any) {\n      setError(err.message || \"Ocurrió un error al restablecer la contraseña.\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (!token) {\n    return (\n      <div className=\"text-center text-destructive\">\n        <p>Token de recuperación inválido o no proporcionado.</p>\n        <Button asChild variant=\"link\">\n          <Link href=\"/forgot-password\">Solicitar un nuevo enlace</Link>\n        </Button>\n      </div>\n    )\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Nueva Contraseña</FormLabel>\n              <FormControl>\n                <Input type=\"password\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"confirmPassword\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Confirmar Nueva Contraseña</FormLabel>\n              <FormControl>\n                <Input type=\"password\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        {error && <p className=\"text-sm font-medium text-destructive\">{error}</p>}\n        <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n          {loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n          Restablecer Contraseña\n        </Button>\n      </form>\n    </Form>\n  )\n}\n\n\nexport default function ResetPasswordPage() {\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-sm\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-2xl font-headline\">\n            <KeyRound className=\"h-6 w-6\" /> Restablecer Contraseña\n          </CardTitle>\n          <CardDescription>\n            Introduce tu nueva contraseña a continuación.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n            <Suspense fallback={<Loader2 className=\"animate-spin\" />}>\n                <ResetPasswordForm />\n            </Suspense>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n"
    },
    {
      "path": "src/app/(auth)/support/account-disabled/page.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { z } from \"zod\"\nimport * as api from \"@/lib/api\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { Loader2, ShieldAlert, LifeBuoy } from \"lucide-react\"\nimport Link from \"next/link\"\n\nconst formSchema = z.object({\n  email: z.string().email({ message: \"Por favor, introduce una dirección de correo válida.\" }),\n  message: z.string().min(10, { message: \"El mensaje debe tener al menos 10 caracteres.\" }),\n})\n\nexport default function DisabledAccountSupportPage() {\n  const [loading, setLoading] = useState(false)\n  const [submitted, setSubmitted] = useState(false)\n  const { toast } = useToast()\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: \"\",\n      message: \"\",\n    },\n  })\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setLoading(true)\n    try {\n      const response = await api.submitDisabledAccountTicket(values.email, values.message)\n      toast({\n        title: \"Mensaje Enviado\",\n        description: response.message,\n      })\n      setSubmitted(true)\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"No se pudo enviar tu mensaje.\",\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-lg\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-2xl font-headline\">\n            <ShieldAlert className=\"h-6 w-6 text-destructive\" /> Soporte para Cuenta Deshabilitada\n          </CardTitle>\n          <CardDescription>\n            {submitted\n              ? \"Gracias por contactarnos. Revisaremos tu caso y nos pondremos en contacto contigo pronto.\"\n              : \"Entendemos que esto puede ser frustrante. Por favor, proporciona tu correo y explica por qué crees que tu cuenta fue deshabilitada por error.\"}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {submitted ? (\n            <div className=\"text-center\">\n              <p className=\"text-muted-foreground\">\n                Tu ticket de soporte ha sido creado.\n              </p>\n              <Button asChild className=\"mt-4\">\n                <Link href=\"/login\">Volver a la página principal</Link>\n              </Button>\n            </div>\n          ) : (\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Tu Correo Electrónico</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"el correo de tu cuenta deshabilitada\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                 <FormField\n                  control={form.control}\n                  name=\"message\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Mensaje</FormLabel>\n                      <FormControl>\n                        <Textarea rows={5} placeholder=\"Explica tu situación aquí...\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                  {loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  <LifeBuoy className=\"mr-2 h-4 w-4\" />\n                  Enviar Solicitud\n                </Button>\n              </form>\n            </Form>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n"
    },
    {
      "path": "src/lib/anime-data.ts",
      "content": "// This file is deprecated. Data is now fetched from the backend API.\n// See src/lib/api.ts\nexport {};\n"
    },
    {
      "path": "src/lib/api.ts",
      "content": "// --- REAL API SERVICE ---\n// This file connects the Next.js frontend to a real backend API.\n// It uses `fetch` to make HTTP requests to the endpoints defined in Python.\n\nimport type { Ally, Anime, User, Comment, Season, Episode, StaffChatMessage, EpisodeComment, PublicUser, Genre, SupportTicket } from './types';\n\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://127.0.0.1:8000';\n\n// --- HELPER FUNCTIONS ---\n\nconst getAuthHeader = () => {\n    // Retrieves the token from localStorage to authorize requests.\n    const token = typeof window !== 'undefined' ? localStorage.getItem('animeverse-auth-token') : null;\n    return token ? { 'Authorization': `Bearer ${token}` } : {};\n};\n\nasync function handleResponse<T>(response: Response): Promise<T> {\n    if (response.status === 204) {\n        return {} as T;\n    }\n    const text = await response.text();\n    if (!response.ok) {\n        let error;\n        try {\n            error = JSON.parse(text);\n        } catch (e) {\n            error = { message: text || response.statusText };\n        }\n        throw new Error(error.message || 'An error occurred');\n    }\n    return text ? JSON.parse(text) : ({} as T);\n}\n\nconst buildUrl = (path: string, params?: Record<string, any>) => {\n    const url = new URL(`${API_URL}${path}`);\n    if (params) {\n        Object.entries(params).forEach(([key, value]) => {\n            if (value !== null && value !== undefined && value !== '') {\n                url.searchParams.append(key, String(value));\n            }\n        });\n    }\n    return url.toString();\n}\n\nconst buildFormDataForApi = (data: Record<string, any>): FormData => {\n    const formData = new FormData();\n    Object.entries(data).forEach(([key, value]) => {\n        // Skip base64 if it's not the primary image data\n        if (key === 'imageBase64' && !value) {\n            return;\n        }\n\n        if (key === 'genre' && Array.isArray(value)) {\n            formData.append(key, value.join(','));\n        } else if (value !== null && value !== undefined) {\n             if (typeof value === 'object' && value !== null && !(value instanceof File)) {\n                // This handles the socialMedia object for allies\n                formData.append(key, JSON.stringify(value));\n            } else {\n                formData.append(key, String(value));\n            }\n        }\n    });\n    return formData;\n};\n\n// --- AUTHENTICATION ---\n\nexport const login = async (email: string, password?: string): Promise<{ token: string, user: User }> => {\n    const response = await fetch(buildUrl('/api/auth/login'), {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n    });\n    return handleResponse(response);\n};\n\nexport const logout = async (): Promise<void> => {\n    // In a real app, you might want to invalidate the token on the server\n    console.log(\"User logged out, cleared local token.\");\n    return;\n};\n\nexport const register = async (name: string, email: string, password?: string): Promise<User> => {\n    const response = await fetch(buildUrl('/api/auth/register'), {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name, email, password }),\n    });\n    return handleResponse(response);\n};\n\nexport const forgotPassword = async (email: string): Promise<{ message: string }> => {\n    const response = await fetch(buildUrl('/api/auth/forgot-password'), {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email }),\n    });\n    return handleResponse(response);\n}\n\nexport const resetPassword = async (token: string, password: string): Promise<{ message: string }> => {\n    const response = await fetch(buildUrl('/api/auth/reset-password'), {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ token, password }),\n    });\n    return handleResponse(response);\n}\n\n\nexport const getCurrentUser = async (): Promise<User> => {\n    const token = typeof window !== 'undefined' ? localStorage.getItem('animeverse-auth-token') : null;\n    if (!token) throw new Error(\"No auth token found\");\n    \n    const response = await fetch(buildUrl('/api/users/me'), {\n        headers: getAuthHeader(),\n    });\n    return handleResponse(response);\n};\n\n\n// --- ANIME ---\n\nexport const getAnimes = async (filters: { q?: string, genre?: string, status?: string, sort_by?: string, isFeatured?: boolean } = {}): Promise<Anime[]> => {\n    const response = await fetch(buildUrl('/api/animes', filters));\n    return handleResponse(response);\n};\n\nexport const getAnimeById = async (id: string): Promise<Anime | undefined> => {\n    if (!id) return undefined;\n    const response = await fetch(buildUrl(`/api/animes/${id}`), {\n        headers: getAuthHeader(),\n    });\n    return handleResponse(response);\n};\n\nexport const getAnimesForHome = async (): Promise<Record<string, Anime[]>> => {\n    const response = await fetch(buildUrl('/api/animes/home-sections'));\n    return handleResponse(response);\n}\n\ntype AnimeMutationData = Omit<Anime, 'id' | 'comments' | 'seasons' | 'genres'> & { imageBase64?: string | null, genre: string[] };\n\nexport const addAnime = async (animeData: AnimeMutationData): Promise<Anime> => {\n    // We send as application/x-www-form-urlencoded\n    const formData = buildFormDataForApi(animeData);\n    const response = await fetch(buildUrl('/api/animes'), {\n        method: 'POST',\n        headers: getAuthHeader(),\n        body: formData,\n    });\n    return handleResponse(response);\n}\n\nexport const updateAnime = async (id: string, animeData: Partial<AnimeMutationData>): Promise<Anime> => {\n    const formData = buildFormDataForApi(animeData);\n    const response = await fetch(buildUrl(`/api/animes/${id}`), {\n        method: 'PATCH',\n        headers: getAuthHeader(), // No 'Content-Type', browser sets it for FormData\n        body: formData,\n    });\n    return handleResponse(response);\n};\n\n\nexport const deleteAnime = async (id: string): Promise<void> => {\n    await fetch(buildUrl(`/api/animes/${id}`), {\n        method: 'DELETE',\n        headers: getAuthHeader(),\n    });\n};\n\n\n// --- USERS ---\n\nexport const getUserProfile = async (username: string): Promise<PublicUser> => {\n    const response = await fetch(buildUrl(`/api/profiles/${username}`));\n    return handleResponse(response);\n}\n\nexport const getUsers = async (query?: string): Promise<User[]> => {\n    const response = await fetch(buildUrl('/api/users', { q: query }), { headers: getAuthHeader() });\n    return handleResponse(response);\n};\n\nexport const updateUserRole = async (userId: string, role: User['role']): Promise<User> => {\n    const response = await fetch(buildUrl(`/api/users/${userId}/role`), {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json', ...getAuthHeader() },\n        body: JSON.stringify({ role }),\n    });\n    return handleResponse(response);\n}\n\nexport const updateUserStatus = async (userId: string, status: User['status']): Promise<User> => {\n    const response = await fetch(buildUrl(`/api/users/${userId}/status`), {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json', ...getAuthHeader() },\n        body: JSON.stringify({ status }),\n    });\n    return handleResponse(response);\n}\n\nexport const deleteUser = async (userId: string): Promise<void> => {\n    await fetch(buildUrl(`/api/users/${userId}`), {\n        method: 'DELETE',\n        headers: getAuthHeader(),\n    });\n};\n\nexport const updateProfile = async (profileData: { name?: string; bio?: string; showActivity?: boolean }): Promise<User> => {\n    const response = await fetch(buildUrl('/api/users/me'), {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json', ...getAuthHeader() },\n        body: JSON.stringify(profileData),\n    });\n    return handleResponse(response);\n}\n\nexport const updatePassword = async (currentPassword: string, newPassword: string):Promise<void> => {\n    const response = await fetch(buildUrl('/api/users/me/password'), {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', ...getAuthHeader() },\n        body: JSON.stringify({ currentPassword, newPassword }),\n    });\n    await handleResponse(response);\n}\n\nexport const updateAvatar = async (avatarBase64: string): Promise<string> => {\n    const response = await fetch(buildUrl('/api/users/me/avatar'), {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', ...getAuthHeader() },\n        body: JSON.stringify({ avatarBase64 }),\n    });\n    const { avatarUrl } = await handleResponse<{avatarUrl: string}>(response);\n    return avatarUrl;\n}\n\n\n// --- COMMENTS ---\n\nexport const addComment = async (animeId: string, data: { text?: string; parentId?: string; mediaBase64?: string | null }): Promise<Comment> => {\n    const response = await fetch(buildUrl(`/api/animes/${animeId}/comments`), {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', ...getAuthHeader() },\n        body: JSON.stringify(data),\n    });\n    return handleResponse(response);\n};\n\nexport const updateComment = async (animeId: string, commentId: string, text: string): Promise<Comment> => {\n    const response = await fetch(buildUrl(`/api/animes/${animeId}/comments/${commentId}`), {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json', ...getAuthHeader() },\n        body: JSON.stringify({ text }),\n    });\n    return handleResponse(response);\n};\n\nexport const deleteComment = async (animeId: string, commentId: string): Promise<void> => {\n    await fetch(buildUrl(`/api/animes/${animeId}/comments/${commentId}`), {\n        method: 'DELETE',\n        headers: getAuthHeader(),\n    });\n}\n\n// --- EPISODE COMMENTS ---\nexport const getEpisodeComments = async (episodeId: string): Promise<EpisodeComment[]> => {\n    const response = await fetch(buildUrl(`/api/episodes/${episodeId}/comments`), { headers: getAuthHeader() });\n    return handleResponse(response);\n}\n\nexport const addEpisodeComment = async (episodeId: string, data: { text?: string; parentId?: string; mediaBase64?: string | null }): Promise<EpisodeComment> => {\n    const response = await fetch(buildUrl(`/api/episodes/${episodeId}/comments`), {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', ...getAuthHeader() },\n        body: JSON.stringify(data),\n    });\n    return handleResponse(response);\n};\n\nexport const updateEpisodeComment = async (episodeId: string, commentId: string, text: string): Promise<EpisodeComment> => {\n    const response = await fetch(buildUrl(`/api/episodes/${episodeId}/comments/${commentId}`), {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json', ...getAuthHeader() },\n        body: JSON.stringify({ text }),\n    });\n    return handleResponse(response);\n};\n\nexport const deleteEpisodeComment = async (episodeId: string, commentId: string): Promise<void> => {\n    await fetch(buildUrl(`/api/episodes/${episodeId}/comments/${commentId}`), {\n        method: 'DELETE',\n        headers: getAuthHeader(),\n    });\n};\n\n// --- SEASONS & EPISODES ---\n\nexport const addSeason = async (animeId: string, seasonData: Omit<Season, 'id'|'episodes'>): Promise<Season> => {\n    const response = await fetch(buildUrl(`/api/animes/${animeId}/seasons`), {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', ...getAuthHeader() },\n        body: JSON.stringify(seasonData),\n    });\n    return handleResponse(response);\n};\n\nexport const addEpisode = async (animeId: string, seasonId: string, episodeData: Omit<Episode, 'id' | 'seasonId' | 'comments'>): Promise<Episode> => {\n    const response = await fetch(buildUrl(`/api/animes/${animeId}/seasons/${seasonId}/episodes`), {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', ...getAuthHeader() },\n        body: JSON.stringify(episodeData),\n    });\n    return handleResponse(response);\n};\n\nexport const deleteEpisode = async (animeId: string, seasonId: string, episodeId: string): Promise<void> => {\n    await fetch(buildUrl(`/api/animes/${animeId}/seasons/${seasonId}/episodes/${episodeId}`), {\n        method: 'DELETE',\n        headers: getAuthHeader(),\n    });\n}\n\nexport const updateEpisode = async (animeId: string, seasonId: string, episodeId: string, episodeData: Partial<Omit<Episode, 'id' | 'seasonId' | 'comments'>>): Promise<Episode> => {\n    const response = await fetch(buildUrl(`/api/animes/${animeId}/seasons/${seasonId}/episodes/${episodeId}`), {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json', ...getAuthHeader() },\n        body: JSON.stringify(episodeData),\n    });\n    return handleResponse(response);\n};\n\n\n// --- STAFF CHAT ---\n\nexport const getStaffChatMessages = async (): Promise<StaffChatMessage[]> => {\n    const response = await fetch(buildUrl('/api/staff-chat'), { headers: getAuthHeader() });\n    return handleResponse(response);\n};\n\nexport const postStaffChatMessage = async (data: { text?: string; parentId?: string; mediaBase64?: string | null }): Promise<StaffChatMessage> => {\n    const response = await fetch(buildUrl('/api/staff-chat'), {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', ...getAuthHeader() },\n        body: JSON.stringify(data),\n    });\n    return handleResponse(response);\n};\n\nexport const updateStaffChatMessage = async (messageId: string, text: string): Promise<StaffChatMessage> => {\n    const response = await fetch(buildUrl(`/api/staff-chat/${messageId}`), {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json', ...getAuthHeader() },\n        body: JSON.stringify({ text }),\n    });\n    return handleResponse(response);\n};\n\nexport const deleteStaffChatMessage = async (messageId: string): Promise<void> => {\n    await fetch(buildUrl(`/api/staff-chat/${messageId}`), {\n        method: 'DELETE',\n        headers: getAuthHeader(),\n    });\n};\n\n\n// --- MISC ---\n\nexport const getGenres = async (): Promise<Genre[]> => {\n    const response = await fetch(buildUrl('/api/genres'));\n    return handleResponse(response);\n};\n\nexport const getAdminDashboardStats = async (): Promise<{totalAnimes: number, totalUsers: number, viewsLast24h: number, pendingReviews: number}> => {\n    // This is a mock implementation. A real implementation would query the backend.\n    const animes = await getAnimes();\n    const users = await getUsers();\n    return {\n        totalAnimes: animes.length,\n        totalUsers: users.length,\n        viewsLast24h: Math.floor(Math.random() * 5000) + 1000,\n        pendingReviews: Math.floor(Math.random() * 20),\n    };\n};\n\nexport const submitDisabledAccountTicket = async (email: string, message: string): Promise<{message: string}> => {\n    const response = await fetch(buildUrl('/api/support/disabled-account'), {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, message }),\n    });\n    return handleResponse(response);\n};\n\n// --- SUPPORT TICKETS ---\nexport const submitTicket = async (data: { subject: string; message: string, ticketType: string }): Promise<{message: string}> => {\n    const response = await fetch(buildUrl('/api/support/ticket'), {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', ...getAuthHeader() },\n        body: JSON.stringify(data),\n    });\n    return handleResponse(response);\n};\n\nexport const getSupportTickets = async (): Promise<SupportTicket[]> => {\n    const response = await fetch(buildUrl('/api/support/tickets'), { headers: getAuthHeader() });\n    return handleResponse(response);\n};\n\nexport const updateTicketStatus = async (ticketId: number, status: SupportTicket['status']): Promise<SupportTicket> => {\n    const response = await fetch(buildUrl(`/api/support/tickets/${ticketId}/status`), {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json', ...getAuthHeader() },\n        body: JSON.stringify({ status }),\n    });\n    return handleResponse(response);\n};\n\n// --- ALLIES ---\nexport const getAllies = async (): Promise<Ally[]> => {\n    const response = await fetch(buildUrl('/api/allies'));\n    return handleResponse(response);\n};\n\ntype AllyMutationData = Omit<Ally, 'id'> & { imageBase64?: string | null };\n\nexport const addAlly = async (allyData: AllyMutationData): Promise<Ally> => {\n    const response = await fetch(buildUrl('/api/allies'), {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', ...getAuthHeader() },\n        body: JSON.stringify(allyData),\n    });\n    return handleResponse(response);\n}\n\nexport const updateAlly = async (id: string, allyData: Partial<AllyMutationData>): Promise<Ally> => {\n    const response = await fetch(buildUrl(`/api/allies/${id}`), {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json', ...getAuthHeader() },\n        body: JSON.stringify(allyData),\n    });\n    return handleResponse(response);\n};\n\nexport const deleteAlly = async (id: string): Promise<void> => {\n    await fetch(buildUrl(`/api/allies/${id}`), {\n        method: 'DELETE',\n        headers: getAuthHeader(),\n    });\n};\n"
    },
    {
      "path": "src/lib/types.ts",
      "content": "export type User = {\n  id: string;\n  username: string;\n  name: string;\n  email: string;\n  role: 'owner' | 'co-owner' | 'admin' | 'user';\n  status: 'active' | 'disabled';\n  joined: string; // ISO string\n  avatarUrl?: string;\n  bio?: string;\n  showActivity?: boolean;\n};\n\nexport type Comment = {\n  id: string;\n  author: Partial<User>;\n  text: string;\n  timestamp: string; // ISO string\n  mediaUrl?: string;\n  parent?: Comment;\n  replies?: Comment[];\n  isDeleted?: boolean;\n};\n\nexport type EpisodeComment = {\n  id: string;\n  author: Partial<User>;\n  text: string;\n  timestamp: string; // ISO string\n  mediaUrl?: string;\n  parent?: EpisodeComment;\n  replies?: EpisodeComment[];\n  isDeleted?: boolean;\n};\n\nexport type StaffChatMessage = {\n  id: string;\n  author: Partial<User>;\n  text: string;\n  timestamp: string; // ISO string\n  mediaUrl?: string;\n  parent?: {\n    id: string;\n    text: string;\n    author: {\n      name: string;\n    };\n    isDeleted?: boolean;\n  };\n  replies: StaffChatMessage[];\n  isDeleted?: boolean;\n}\n\nexport type EpisodeSource = {\n  id: string;\n  server: string;\n  url: string;\n  language: 'Subtitled' | 'Latin Spanish' | 'Castilian' | 'English';\n};\n\nexport type Episode = {\n  id:string;\n  title: string;\n  duration: number; // in minutes\n  sources: EpisodeSource[];\n  seasonId: string;\n  synopsis?: string;\n  comments: EpisodeComment[];\n};\n\nexport type Season = {\n  id: string;\n  title: string;\n  episodes: Episode[];\n};\n\nexport type Genre = {\n  id: number;\n  name: string;\n}\n\nexport type Anime = {\n  id: string;\n  title: string;\n  description: string;\n  genres: Genre[];\n  audience: 'Kids' | 'Teens' | 'Adults';\n  rating: number;\n  imageUrl: string;\n  trailerUrl?: string;\n  status: 'Airing' | 'Finished' | 'Upcoming';\n  announcement?: string;\n  comments: Comment[];\n  seasons: Season[];\n  isFeatured?: boolean;\n};\n\n// For public user profiles\nexport type CommentForProfile = {\n  anime_id: string;\n  anime_title: string;\n  text: string;\n  timestamp: string;\n}\n\nexport type PublicUser = {\n  id: string;\n  username: string;\n  name: string;\n  avatarUrl?: string;\n  bio?: string;\n  joined: string;\n  comments: CommentForProfile[];\n}\n\nexport type SupportTicket = {\n    id: number;\n    user_email: string;\n    subject: string;\n    message: string;\n    timestamp: string;\n    status: 'open' | 'closed' | 'in-progress';\n    ticket_type: 'disabled-account' | 'general-inquiry' | 'bug-report' | 'suggestion';\n    user_id?: string | null;\n    user?: Pick<User, 'id' | 'name' | 'username'> | null;\n}\n\nexport type Ally = {\n  id: string;\n  name: string;\n  imageUrl: string;\n  description?: string;\n  mainUrl?: string;\n  socialMedia?: {\n    facebook?: string;\n    twitter?: string;\n    instagram?: string;\n    discord?: string;\n    youtube?: string;\n  };\n  isFeatured?: boolean;\n};\n"
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"
    },
    {
      "path": "src/hooks/use-auth.ts",
      "content": "\"use client\"\n\nimport { useContext } from 'react';\nimport { AuthContext } from '@/components/auth-provider';\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"
    },
    {
      "path": "src/hooks/use-mobile.tsx",
      "content": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n"
    },
    {
      "path": "src/hooks/use-toast.ts",
      "content": "\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n"
    },
    {
      "path": "src/components/providers.tsx",
      "content": "\"use client\"\n\nimport { AuthProvider } from '@/components/auth-provider';\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { ThemeProvider } from '@/components/theme-provider';\nimport type { ReactNode } from 'react';\n\nexport function Providers({ children }: { children: ReactNode }) {\n  return (\n    <ThemeProvider\n      attribute=\"class\"\n      defaultTheme=\"dark\"\n      enableSystem\n      disableTransitionOnChange\n    >\n      <AuthProvider>\n        {children}\n        <Toaster />\n      </AuthProvider>\n    </ThemeProvider>\n  );\n}\n"
    },
    {
      "path": "src/components/theme-provider.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\"\nimport type { ThemeProviderProps } from \"next-themes/dist/types\"\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n"
    },
    {
      "path": "src/components/theme-toggle.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useTheme } from \"next-themes\"\nimport { Moon, Sun } from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme()\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      aria-label=\"Toggle theme\"\n    >\n      <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  )\n}\n"
    },
    {
      "path": "src/components/auth-provider.tsx",
      "content": "\"use client\"\n\nimport type { User } from '@/lib/types';\nimport * as api from '@/lib/api';\nimport { useRouter } from 'next/navigation';\nimport React, { createContext, useState, useEffect, type ReactNode, useCallback, useContext } from 'react';\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  login: (email: string, password?: string) => Promise<void>;\n  logout: () => void;\n  loading: boolean;\n  checkUser: () => Promise<void>;\n}\n\nexport const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const router = useRouter();\n\n  const checkUser = useCallback(async () => {\n    const token = localStorage.getItem('animeverse-auth-token');\n    if (token) {\n      try {\n        const currentUser = await api.getCurrentUser();\n        setUser(currentUser);\n      } catch (error) {\n        console.error(\"Session invalid, logging out\", error);\n        setUser(null);\n        localStorage.removeItem('animeverse-auth-token');\n      }\n    } else {\n        setUser(null); // Explicitly set user to null if no token\n    }\n    setLoading(false);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    checkUser();\n  }, [checkUser]);\n\n  const login = async (email: string, password?: string) => {\n    try {\n      const { token, user: loggedInUser } = await api.login(email, password || '');\n      localStorage.setItem('animeverse-auth-token', token);\n      setUser(loggedInUser);\n      if (['admin', 'co-owner', 'owner'].includes(loggedInUser.role)) {\n        router.push('/admin');\n      } else {\n        router.push('/dashboard');\n      }\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    api.logout();\n    setUser(null);\n    localStorage.removeItem('animeverse-auth-token');\n    router.push('/login');\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, isAuthenticated: !!user, login, logout, loading, checkUser }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n"
    },
    {
      "path": "src/components/app-layout.tsx",
      "content": "\"use client\"\n\nimport React from 'react';\nimport { usePathname } from 'next/navigation';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Clapperboard, Film, LayoutDashboard, Loader2, Settings, Users, Handshake, MessageSquare, LifeBuoy, Contact, Heart, LogIn } from 'lucide-react';\nimport { SidebarProvider, Sidebar, SidebarHeader, SidebarContent, SidebarMenu, SidebarMenuItem, SidebarMenuButton, SidebarInset, SidebarTrigger, SidebarSeparator } from '@/components/ui/sidebar';\nimport { UserNav } from '@/components/user-nav';\nimport Link from 'next/link';\n\n// Admin items\nconst adminNavItems = [\n    { href: \"/admin\", label: \"Dashboard\", icon: <LayoutDashboard className=\"h-5 w-5\" /> },\n    { href: \"/admin/manage-anime\", label: \"Manage Anime\", icon: <Film className=\"h-5 w-5\" /> },\n    { href: \"/admin/manage-users\", label: \"Manage Users\", icon: <Users className=\"h-5 w-5\" /> },\n    { href: \"/admin/manage-allies\", label: \"Manage Allies\", icon: <Handshake className=\"h-5 w-5\" /> },\n    { href: \"/admin/staff-chat\", label: \"Staff Chat\", icon: <MessageSquare className=\"h-5 w-5\" /> },\n    { href: \"/admin/support-tickets\", label: \"Support Tickets\", icon: <LifeBuoy className=\"h-5 w-5\" /> },\n];\n\n// Regular user items\nconst userNavItems = [\n    { href: \"/\", icon: <LayoutDashboard className=\"h-4 w-4\" />, label: \"Dashboard\" },\n    { href: \"/allies\", icon: <Handshake className=\"h-4 w-4\" />, label: \"Allies\" },\n    { href: \"/profile\", icon: <Users className=\"h-4 w-4\" />, label: \"Profile\" },\n    { href: \"/settings\", icon: <Settings className=\"h-4 w-4\" />, label: \"Settings\" },\n    { href: \"/contact\", icon: <Contact className=\"h-4 w-4\" />, label: \"Contact Us\" },\n    { href: \"/donate\", icon: <Heart className=\"h-4 w-4\" />, label: \"Donate\" },\n];\n\nconst guestNavItems = [\n    { href: \"/\", icon: <LayoutDashboard className=\"h-4 w-4\" />, label: \"Dashboard\" },\n    { href: \"/allies\", icon: <Handshake className=\"h-4 w-4\" />, label: \"Allies\" },\n    { href: \"/contact\", icon: <Contact className=\"h-4 w-4\" />, label: \"Contact Us\" },\n    { href: \"/donate\", icon: <Heart className=\"h-4 w-4\" />, label: \"Donate\" },\n];\n\n\nexport function AppLayout({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated, user, loading } = useAuth();\n  const pathname = usePathname();\n\n  if (loading) {\n    return (\n      <div className=\"flex h-screen w-full items-center justify-center bg-background\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n  \n  const isAdminPage = pathname.startsWith('/admin');\n  const isAdminRole = user && ['admin', 'co-owner', 'owner'].includes(user.role);\n\n  let currentNavItems;\n  if(isAuthenticated) {\n    currentNavItems = isAdminRole ? adminNavItems : userNavItems;\n  } else {\n    currentNavItems = guestNavItems;\n  }\n  \n  const currentHeaderTitle = isAdminPage ? 'Admin Panel' : 'AnimeVerse';\n  const currentHeaderLink = isAdminPage ? '/admin' : '/';\n\n  return (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarHeader className='p-4'>\n          <Link href={currentHeaderLink} className='flex items-center gap-2'>\n            <Clapperboard className=\"w-8 h-8 text-primary\" />\n            <h1 className=\"text-2xl font-headline font-bold\">{currentHeaderTitle}</h1>\n          </Link>\n        </SidebarHeader>\n        <SidebarContent>\n          <SidebarMenu>\n            {currentNavItems.map((item) => (\n                <SidebarMenuItem key={item.href}>\n                    <SidebarMenuButton asChild isActive={pathname === item.href || (item.href !== '/' && pathname.startsWith(item.href))} className=\"justify-start\">\n                        <Link href={item.href}>{item.icon}{item.label}</Link>\n                    </SidebarMenuButton>\n                </SidebarMenuItem>\n            ))}\n            <SidebarSeparator className=\"my-2\" />\n             {isAuthenticated && isAdminRole && !isAdminPage && (\n                 <SidebarMenuItem>\n                    <SidebarMenuButton asChild>\n                        <Link href=\"/admin\"><LayoutDashboard className=\"h-4 w-4\" />Admin Panel</Link>\n                    </SidebarMenuButton>\n                </SidebarMenuItem>\n            )}\n             {isAdminPage && (\n                 <SidebarMenuItem>\n                    <SidebarMenuButton asChild className=\"justify-start font-semibold text-muted-foreground hover:text-foreground\">\n                        <Link href=\"/\"><Clapperboard className=\"mr-2 h-5 w-5\" />Ver Sitio</Link>\n                    </SidebarMenuButton>\n                </SidebarMenuItem>\n            )}\n            {!isAuthenticated && (\n                 <SidebarMenuItem>\n                    <SidebarMenuButton asChild>\n                        <Link href=\"/login\"><LogIn className=\"h-4 w-4\" />Iniciar Sesión</Link>\n                    </SidebarMenuButton>\n                </SidebarMenuItem>\n            )}\n          </SidebarMenu>\n        </SidebarContent>\n      </Sidebar>\n      <SidebarInset>\n        <div className=\"flex h-full flex-col\">\n            <header className=\"sticky top-0 z-10 flex h-16 shrink-0 items-center gap-4 border-b bg-background/80 backdrop-blur-sm px-4\">\n              <SidebarTrigger className=\"md:hidden\" />\n              <div className=\"ml-auto\">\n                <UserNav />\n              </div>\n            </header>\n            <main className=\"flex-1 overflow-y-auto p-4 md:p-6 animate-fade-in\">\n              {children}\n            </main>\n        </div>\n      </SidebarInset>\n    </SidebarProvider>\n  );\n}\n"
    },
    {
      "path": "src/components/user-nav.tsx",
      "content": "\"use client\"\n\nimport { useRouter } from \"next/navigation\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { useAuth } from \"@/hooks/use-auth\"\nimport Link from \"next/link\"\n\nexport function UserNav() {\n  const { user, logout, isAuthenticated } = useAuth();\n  const router = useRouter();\n\n  if (!isAuthenticated) {\n    return (\n        <div className=\"flex items-center gap-2\">\n            <Button asChild>\n                <Link href=\"/login\">Iniciar Sesión</Link>\n            </Button>\n             <Button asChild variant=\"secondary\">\n                <Link href=\"/register\">Registrarse</Link>\n            </Button>\n        </div>\n    )\n  }\n\n  if (!user) return null;\n\n  const getInitials = (name?: string) => {\n    if (!name) return 'U';\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  }\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" className=\"relative h-9 w-9 rounded-full\">\n          <Avatar className=\"h-9 w-9\">\n            <AvatarImage src={user.avatarUrl || `https://placehold.co/40x40.png`} alt={`@${user.name}`} />\n            <AvatarFallback>{getInitials(user.name)}</AvatarFallback>\n          </Avatar>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n        <DropdownMenuLabel className=\"font-normal\">\n          <div className=\"flex flex-col space-y-1\">\n            <p className=\"text-sm font-medium leading-none\">{user.name}</p>\n            <p className=\"text-xs leading-none text-muted-foreground\">\n              {user.email}\n            </p>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuGroup>\n          <DropdownMenuItem onClick={() => router.push('/profile')}>\n            Profile\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => router.push('/settings')}>\n            Settings\n          </DropdownMenuItem>\n        </DropdownMenuGroup>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem onClick={logout}>\n          Log out\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n"
    },
    {
      "path": "src/components/video-player.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect, useRef } from 'react';\nimport videojs from 'video.js';\nimport 'video.js/dist/video-js.css';\n\ninterface VideoPlayerProps {\n  options: any; \n}\n\nexport const VideoPlayer: React.FC<VideoPlayerProps> = ({ options }) => {\n  const videoRef = useRef<HTMLDivElement>(null);\n  const playerRef = useRef<any>(null);\n\n  useEffect(() => {\n    // Make sure we have a video element and a player instance hasn't been created yet.\n    if (videoRef.current && !playerRef.current) {\n      const videoElement = document.createElement(\"video\");\n      videoElement.classList.add('video-js', 'vjs-big-play-centered');\n      videoRef.current.appendChild(videoElement);\n\n      const player = playerRef.current = videojs(videoElement, options, () => {\n        console.log(\"Player is ready\");\n      });\n    } else if(playerRef.current) {\n      // If the player is already initialized, just update the source.\n      const player = playerRef.current;\n      player.autoplay(options.autoplay);\n      player.src(options.sources);\n    }\n  }, [options]);\n\n  // Dispose the player when the component unmounts\n  useEffect(() => {\n    const player = playerRef.current;\n\n    return () => {\n      if (player && !player.isDisposed()) {\n        player.dispose();\n        playerRef.current = null;\n      }\n    };\n  }, []);\n\n  return (\n    <div data-vjs-player>\n      <div ref={videoRef} />\n    </div>\n  );\n};\n"
    },
    {
      "path": "src/components/ad-banner.tsx",
      "content": "\"use client\"\n\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { ExternalLink } from \"lucide-react\"\n\nexport function AdBanner() {\n  return (\n    <Card className=\"bg-muted/50 border-dashed\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex justify-between items-center mb-2\">\n            <p className=\"text-xs font-semibold text-muted-foreground\">Advertisement</p>\n        </div>\n        <div className=\"h-24 w-full bg-muted flex items-center justify-center rounded-md\">\n            {/* \n              AQUÍ ES DONDE PEGAS TU CÓDIGO DE ANUNCIO.\n              Por ejemplo, el código que te da Google AdSense.\n              Reemplaza el <p> de abajo con tu código.\n            */}\n            <p className=\"text-sm text-muted-foreground\">Your Ad Code (e.g., from AdSense) Goes Here</p>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n"
    },
    {
      "path": "src/components/ally-dialog.tsx",
      "content": "\n\"use client\";\n\nimport { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport type { Ally } from '@/lib/types';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from './ui/switch';\nimport Image from 'next/image';\nimport { Loader2 } from 'lucide-react';\n\nconst socialMediaSchema = z.object({\n    facebook: z.string().optional(),\n    twitter: z.string().optional(),\n    instagram: z.string().optional(),\n    discord: z.string().optional(),\n    youtube: z.string().optional(),\n}).optional();\n\nconst FormSchema = z.object({\n  name: z.string().min(1, 'Name is required.'),\n  description: z.string().optional(),\n  imageUrl: z.string().min(1, 'Image is required.'),\n  mainUrl: z.string().url('Must be a valid URL.').optional().or(z.literal('')),\n  isFeatured: z.boolean().default(false),\n  socialMedia: socialMediaSchema\n});\n\ntype FormData = z.infer<typeof FormSchema>;\n\ninterface AllyDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSave: (ally: Omit<Ally, 'id'> & { imageBase64?: string | null }) => Promise<void>;\n  ally: Ally | null;\n}\n\nconst fileToDataUri = (file: File): Promise<string> => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as string);\n    reader.onerror = reject;\n    reader.readAsDataURL(file);\n});\n\nexport function AllyDialog({ isOpen, onOpenChange, onSave, ally }: AllyDialogProps) {\n  const form = useForm<FormData>({\n    resolver: zodResolver(FormSchema),\n  });\n  const [imagePreview, setImagePreview] = useState<string | null>(null);\n  const [imageBase64, setImageBase64] = useState<string | null>(null);\n  const [isSaving, setIsSaving] = useState(false);\n  \n  useEffect(() => {\n    if (isOpen) {\n        if (ally) {\n            form.reset({\n                name: ally.name,\n                description: ally.description || '',\n                imageUrl: ally.imageUrl,\n                mainUrl: ally.mainUrl || '',\n                isFeatured: ally.isFeatured || false,\n                socialMedia: ally.socialMedia || {}\n            });\n            setImagePreview(ally.imageUrl);\n        } else {\n            form.reset({\n                name: '',\n                description: '',\n                imageUrl: 'https://placehold.co/400x400.png',\n                mainUrl: '',\n                isFeatured: false,\n                socialMedia: {}\n            });\n            setImagePreview('https://placehold.co/400x400.png');\n        }\n        setImageBase64(null);\n    }\n  }, [ally, form, isOpen]);\n\n  const handleSubmit = async (data: FormData) => {\n    setIsSaving(true);\n    await onSave({ ...data, imageBase64 });\n    setIsSaving(false);\n  };\n  \n  const handleOpenChange = (open: boolean) => {\n    if (!open) {\n      form.reset();\n      setImagePreview(null);\n      setImageBase64(null);\n    }\n    onOpenChange(open);\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleOpenChange}>\n      <DialogContent className=\"sm:max-w-xl\">\n        <DialogHeader>\n          <DialogTitle>{ally ? 'Edit Ally' : 'Add New Ally'}</DialogTitle>\n          <DialogDescription>\n            {ally ? 'Make changes to the ally details.' : 'Add a new ally to the list.'}\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4 py-4 max-h-[70vh] overflow-y-auto pr-4\">\n            <FormField control={form.control} name=\"name\" render={({ field }) => ( <FormItem><FormLabel>Name</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem> )} />\n            <FormField control={form.control} name=\"description\" render={({ field }) => ( <FormItem><FormLabel>Description</FormLabel><FormControl><Textarea {...field} /></FormControl><FormMessage /></FormItem> )} />\n            \n            <FormField control={form.control} name=\"imageUrl\" render={({ field }) => (\n                <FormItem>\n                    <FormLabel>Image</FormLabel>\n                    <div className='flex items-center gap-4'>\n                        {imagePreview && <Image src={imagePreview} alt=\"Preview\" width={80} height={80} className=\"rounded-full aspect-square object-cover\" />}\n                        <Input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={async (e) => {\n                                const file = e.target.files?.[0];\n                                if (file) {\n                                    const previewUrl = URL.createObjectURL(file);\n                                    setImagePreview(previewUrl);\n                                    const dataUri = await fileToDataUri(file);\n                                    setImageBase64(dataUri);\n                                    form.setValue('imageUrl', previewUrl, { shouldValidate: true });\n                                }\n                            }}\n                        />\n                    </div>\n                    <FormMessage />\n                </FormItem>\n            )}/>\n\n            <FormField control={form.control} name=\"mainUrl\" render={({ field }) => ( <FormItem><FormLabel>Main Website URL</FormLabel><FormControl><Input placeholder=\"https://example.com\" {...field} /></FormControl><FormMessage /></FormItem> )} />\n            \n            <FormField control={form.control} name=\"isFeatured\" render={({ field }) => (<FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\"><div className=\"space-y-0.5\"><FormLabel>Featured Ally</FormLabel></div><FormControl><Switch checked={field.value} onCheckedChange={field.onChange} /></FormControl></FormItem> )} />\n           \n            <DialogFooter>\n              <Button type=\"button\" variant=\"ghost\" onClick={() => handleOpenChange(false)} disabled={isSaving}>Cancel</Button>\n              <Button type=\"submit\" disabled={isSaving}>\n                {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Save\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"
    },
    {
      "path": "src/components/anime-card.tsx",
      "content": "\"use client\"\n\nimport type { Anime } from \"@/lib/types\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport Image from \"next/image\"\nimport Link from \"next/link\"\nimport { Star } from \"lucide-react\"\n\ninterface AnimeCardProps {\n  anime: Anime\n}\n\nexport function AnimeCard({ anime }: AnimeCardProps) {\n  return (\n    <Link href={`/anime/${anime.id}-${anime.title.toLowerCase().replace(/ /g, '-')}`} className=\"block h-full group\">\n      <Card className=\"h-full overflow-hidden transition-all duration-300 hover:shadow-lg hover:shadow-primary/20 hover:-translate-y-1 animate-slide-up opacity-0 [--delay:50ms] [animation-fill-mode:forwards] [animation-delay:var(--delay)]\">\n        <CardHeader className=\"p-0 overflow-hidden\">\n          <Image\n            src={anime.imageUrl}\n            alt={`Poster for ${anime.title}`}\n            width={600}\n            height={400}\n            className=\"aspect-video w-full object-cover transition-transform duration-300 group-hover:scale-105\"\n            data-ai-hint={`${(anime.genres?.[0]?.name || 'anime').toLowerCase()} poster`}\n          />\n        </CardHeader>\n        <CardContent className=\"p-3\">\n          <div className=\"flex items-start justify-between gap-2\">\n              <CardTitle className=\"mb-2 font-headline text-base\">{anime.title}</CardTitle>\n              <div className=\"flex items-center gap-1 text-yellow-400\">\n                  <Star className=\"h-4 w-4 fill-current\" />\n                  <span className=\"font-bold text-sm text-foreground\">{anime.rating}</span>\n              </div>\n          </div>\n          <div className=\"flex flex-wrap gap-1\">\n            {(anime.genres || []).map((g) => (\n              <Badge key={g.id} variant=\"secondary\" className=\"text-xs\">{g.name}</Badge>\n            ))}\n            <Badge variant=\"outline\" className=\"text-xs\">{anime.audience}</Badge>\n          </div>\n        </CardContent>\n      </Card>\n    </Link>\n  )\n}\n"
    },
    {
      "path": "src/components/anime-dialog.tsx",
      "content": "\n\"use client\";\n\nimport { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport type { Anime } from '@/lib/types';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Switch } from './ui/switch';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\nimport Image from 'next/image';\nimport { Loader2 } from 'lucide-react';\n\nconst FormSchema = z.object({\n  title: z.string().min(1, 'Title is required.'),\n  description: z.string().min(1, 'Description is required.'),\n  announcement: z.string().optional(),\n  genre: z.string().min(1, 'Enter at least one genre.'),\n  audience: z.enum(['Kids', 'Teens', 'Adults']),\n  rating: z.coerce.number().min(0).max(5),\n  status: z.enum(['Airing', 'Finished', 'Upcoming']),\n  imageUrl: z.string().min(1, 'Image is required.'),\n  trailerUrl: z.string().url('Must be a valid URL.').optional().or(z.literal('')), \n  isFeatured: z.boolean().optional(),\n});\n\ntype FormData = z.infer<typeof FormSchema>;\n\ninterface AnimeDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSave: (anime: Omit<Anime, 'id' | 'comments' | 'seasons' | 'genres'> & { imageBase64?: string | null, genre: string[] }) => Promise<void>;\n  anime?: Anime | null;\n}\n\nconst fileToDataUri = (file: File): Promise<string> => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as string);\n    reader.onerror = reject;\n    reader.readAsDataURL(file);\n});\n\n\nexport function AnimeDialog({ isOpen, onOpenChange, onSave, anime }: AnimeDialogProps) {\n  const form = useForm<FormData>({\n    resolver: zodResolver(FormSchema),\n  });\n  const [imagePreview, setImagePreview] = useState<string | null>(null);\n  const [imageBase64, setImageBase64] = useState<string | null>(null);\n  const [isSaving, setIsSaving] = useState(false);\n  \n  useEffect(() => {\n    const defaultImageUrl = 'https://placehold.co/600x400.png';\n    if (isOpen) {\n        if (anime) {\n            form.reset({\n                title: anime.title,\n                description: anime.description,\n                announcement: anime.announcement || '',\n                genre: Array.isArray(anime.genres) ? anime.genres.map(g => g.name).join(', ') : '',\n                audience: anime.audience,\n                rating: anime.rating,\n                status: anime.status,\n                imageUrl: anime.imageUrl,\n                trailerUrl: anime.trailerUrl || '',\n                isFeatured: anime.isFeatured || false,\n            });\n            setImagePreview(anime.imageUrl);\n        } else {\n            form.reset({\n                title: '',\n                description: '',\n                announcement: '',\n                genre: '',\n                audience: 'Teens',\n                rating: 0,\n                status: 'Airing',\n                imageUrl: defaultImageUrl,\n                trailerUrl: '',\n                isFeatured: false,\n            });\n            setImagePreview(defaultImageUrl);\n        }\n        setImageBase64(null);\n    }\n  }, [anime, form, isOpen]);\n\n\n  const handleSubmit = async (data: FormData) => {\n    setIsSaving(true);\n    // If there's a base64 image, we use it, otherwise we keep the existing imageUrl\n    const submissionData = { \n        ...data, \n        imageBase64, \n        genre: data.genre.split(',').map(g => g.trim()) \n    };\n    if (imageBase64) {\n        submissionData.imageUrl = imageBase64;\n    }\n\n    await onSave(submissionData);\n    setIsSaving(false);\n  };\n  \n  const handleOpenChange = (open: boolean) => {\n    if (!open) {\n      form.reset();\n      setImagePreview(null);\n      setImageBase64(null);\n    }\n    onOpenChange(open);\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleOpenChange}>\n      <DialogContent className=\"sm:max-w-xl\">\n        <DialogHeader>\n          <DialogTitle>{anime ? 'Edit Anime' : 'Add New Anime'}</DialogTitle>\n          <DialogDescription>\n            {anime ? 'Make changes to the anime details.' : 'Add a new series to the catalog.'}\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4 py-4 max-h-[70vh] overflow-y-auto pr-4\">\n            <FormField control={form.control} name=\"title\" render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Title</FormLabel>\n                  <FormControl><Input {...field} /></FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField control={form.control} name=\"description\" render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl><Textarea {...field} /></FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n             <FormField control={form.control} name=\"announcement\" render={({ field }) => ( <FormItem><FormLabel>Announcement (Optional)</FormLabel><FormControl><Textarea {...field} placeholder=\"e.g. New season coming soon!\" /></FormControl><FormMessage /></FormItem> )} />\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField control={form.control} name=\"genre\" render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Genres (comma-separated)</FormLabel>\n                      <FormControl><Input {...field} /></FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                 <FormField control={form.control} name=\"rating\" render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Rating (0-5)</FormLabel>\n                      <FormControl><Input type=\"number\" step=\"0.1\" {...field} /></FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                 <FormField control={form.control} name=\"audience\" render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Audience</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl><SelectTrigger><SelectValue /></SelectTrigger></FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Kids\">Kids</SelectItem>\n                          <SelectItem value=\"Teens\">Teens</SelectItem>\n                          <SelectItem value=\"Adults\">Adults</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField control={form.control} name=\"status\" render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl><SelectTrigger><SelectValue /></SelectTrigger></FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Airing\">Airing</SelectItem>\n                          <SelectItem value=\"Finished\">Finished</SelectItem>\n                          <SelectItem value=\"Upcoming\">Upcoming</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n            </div>\n            \n            <FormField\n              control={form.control}\n              name=\"imageUrl\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Image</FormLabel>\n                  {imagePreview && (\n                    <div className=\"relative aspect-video w-full max-w-sm rounded-md overflow-hidden my-2\">\n                        <Image src={imagePreview} alt=\"Image Preview\" fill objectFit=\"cover\" />\n                    </div>\n                  )}\n                  <Tabs defaultValue=\"url\" className=\"w-full\">\n                    <TabsList>\n                      <TabsTrigger value=\"url\">URL</TabsTrigger>\n                      <TabsTrigger value=\"upload\">Upload</TabsTrigger>\n                    </TabsList>\n                    <TabsContent value=\"url\">\n                      <FormControl>\n                          <Input \n                              placeholder=\"https://example.com/image.png\" \n                              value={field.value.startsWith('blob:') || field.value.startsWith('data:') ? '' : field.value}\n                              onChange={(e) => {\n                                  field.onChange(e);\n                                  setImagePreview(e.target.value);\n                                  setImageBase64(null);\n                              }}\n                          />\n                      </FormControl>\n                    </TabsContent>\n                    <TabsContent value=\"upload\">\n                       <FormControl>\n                          <Input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={async (e) => {\n                                const file = e.target.files?.[0];\n                                if (file) {\n                                    const previewUrl = URL.createObjectURL(file);\n                                    setImagePreview(previewUrl);\n                                    const dataUri = await fileToDataUri(file);\n                                    setImageBase64(dataUri);\n                                    form.setValue('imageUrl', previewUrl, { shouldValidate: true });\n                                }\n                            }}\n                          />\n                      </FormControl>\n                    </TabsContent>\n                  </Tabs>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField control={form.control} name=\"trailerUrl\" render={({ field }) => (\n                <FormItem>\n                  <FormLabel>YouTube Trailer URL</FormLabel>\n                  <FormControl><Input placeholder=\"https://youtube.com/watch?v=...\" {...field} /></FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n             <FormField\n                control={form.control}\n                name=\"isFeatured\"\n                render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n                    <div className=\"space-y-0.5\">\n                        <FormLabel>Featured Anime</FormLabel>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Featured animes appear at the top of the dashboard.\n                        </p>\n                    </div>\n                    <FormControl>\n                        <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        />\n                    </FormControl>\n                    </FormItem>\n                )}\n                />\n            <DialogFooter>\n              <Button type=\"button\" variant=\"ghost\" onClick={() => handleOpenChange(false)} disabled={isSaving}>Cancel</Button>\n              <Button type=\"submit\" disabled={isSaving}>\n                {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Save\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n    "
    },
    {
      "path": "src/components/comment-section.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect, useRef } from 'react';\nimport type { Comment as CommentType, User } from '@/lib/types';\nimport * as api from '@/lib/api';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Avatar, AvatarFallback, AvatarImage } from './ui/avatar';\nimport { Button } from './ui/button';\nimport { Textarea } from './ui/textarea';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Separator } from './ui/separator';\nimport { Badge } from './ui/badge';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Trash, Reply, X, Paperclip, Pencil, Check, MessageSquareWarning, LogIn } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport Image from 'next/image';\nimport { cn } from '@/lib/utils';\nimport Link from 'next/link';\nimport {\n    AlertDialog,\n    AlertDialogAction,\n    AlertDialogCancel,\n    AlertDialogContent,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface CommentSectionProps {\n  initialComments: CommentType[];\n  animeId: string;\n}\n\nconst getInitials = (name?: string) => {\n  if (typeof name !== 'string' || !name) return '';\n  return name.split(' ').map(n => n[0]).join('').toUpperCase();\n};\n\nconst isAdminRole = (role?: User['role']) => {\n    if (!role) return false;\n    return ['owner', 'co-owner', 'admin'].includes(role);\n}\n\nconst fileToDataUri = (file: File): Promise<string> => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as string);\n    reader.onerror = reject;\n    reader.readAsDataURL(file);\n});\n\nconst Comment = ({ comment, onReply, onDelete, onEdit }: { comment: CommentType, onReply: (c: CommentType) => void, onDelete: (id: string) => void, onEdit: (c: CommentType) => void }) => {\n    const { user } = useAuth();\n    \n    return (\n        <div className=\"flex items-start gap-4\">\n            <Link href={`/profile/${comment.author?.username}`}>\n                <Avatar>\n                    <AvatarImage src={comment.author?.avatarUrl || `https://placehold.co/40x40.png`} alt={`@${comment.author?.name}`} />\n                    <AvatarFallback>{getInitials(comment.author?.name)}</AvatarFallback>\n                </Avatar>\n            </Link>\n            <div className=\"flex-1\">\n                <div className=\"flex items-center gap-2 flex-wrap\">\n                    <Link href={`/profile/${comment.author?.username}`}>\n                        <p className=\"font-semibold hover:underline\">{comment.author?.name}</p>\n                    </Link>\n                    {isAdminRole(comment.author?.role) && (\n                        <Badge variant=\"secondary\" className=\"capitalize\">{comment.author?.role}</Badge>\n                    )}\n                    <span className=\"text-xs text-muted-foreground\">\n                        {formatDistanceToNow(new Date(comment.timestamp), { addSuffix: true })}\n                    </span>\n                </div>\n                {comment.parent && (\n                    <p className=\"text-xs text-muted-foreground italic mt-1\">\n                        Respondiendo a {comment.parent.author?.name}\n                    </p>\n                )}\n                {comment.isDeleted ? (\n                     <div className=\"flex items-center gap-2 italic text-sm opacity-70 mt-1\">\n                        <MessageSquareWarning className=\"h-4 w-4\" />\n                        <span>Este comentario fue eliminado.</span>\n                    </div>\n                ) : (\n                    <>\n                        {comment.text && <p className=\"mt-1 text-sm text-foreground/90 pr-4\">{comment.text}</p>}\n                        {comment.mediaUrl && <Image src={comment.mediaUrl} alt=\"Comment media\" width={200} height={150} className=\"mt-2 rounded-md\" />}\n                    </>\n                )}\n                \n                <div className=\"flex items-center gap-2 mt-2\">\n                    {!comment.isDeleted && user && (\n                      <>\n                        <Button variant=\"ghost\" size=\"sm\" onClick={() => onReply(comment)} className=\"text-xs\">\n                            <Reply className=\"h-3 w-3 mr-1\" />\n                            Responder\n                        </Button>\n                        {(user.id === comment.author?.id || isAdminRole(user.role)) && (\n                          <>\n                            <Button variant=\"ghost\" size=\"sm\" onClick={() => onEdit(comment)} className=\"text-xs\">\n                                <Pencil className=\"h-3 w-3 mr-1\" />\n                                Editar\n                            </Button>\n                            <Button variant=\"ghost\" size=\"sm\" className=\"text-xs text-destructive hover:text-destructive\" onClick={() => onDelete(comment.id)}>\n                                <Trash className=\"h-3 w-3 mr-1\" />\n                                Eliminar\n                            </Button>\n                          </>\n                        )}\n                      </>\n                    )}\n                </div>\n\n                {comment.replies && comment.replies.length > 0 && (\n                     <div className=\"mt-4 pl-4 border-l-2 border-muted-foreground/20 space-y-4\">\n                        {comment.replies.map(reply => (\n                            <Comment key={reply.id} comment={reply} onReply={onReply} onDelete={onDelete} onEdit={onEdit} />\n                        ))}\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport function CommentSection({ initialComments, animeId }: CommentSectionProps) {\n  const { user } = useAuth();\n  const [comments, setComments] = useState<CommentType[]>(initialComments);\n  const [newCommentText, setNewCommentText] = useState('');\n  const [mediaBase64, setMediaBase64] = useState<string | null>(null);\n  const [mediaPreview, setMediaPreview] = useState<string | null>(null);\n  const [replyTo, setReplyTo] = useState<CommentType | null>(null);\n  const [editingComment, setEditingComment] = useState<CommentType | null>(null);\n  const [deletingCommentId, setDeletingCommentId] = useState<string | null>(null);\n\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { toast } = useToast();\n  \n  useEffect(() => {\n    setComments(initialComments);\n  }, [initialComments]);\n\n  useEffect(() => {\n    if (editingComment) {\n        setNewCommentText(editingComment.text || '');\n        setReplyTo(null);\n        setMediaBase64(null);\n        setMediaPreview(null);\n        textareaRef.current?.focus();\n    }\n  }, [editingComment]);\n\n  const resetForm = () => {\n    setNewCommentText('');\n    setMediaBase64(null);\n    setMediaPreview(null);\n    setReplyTo(null);\n    setEditingComment(null);\n    if(fileInputRef.current) fileInputRef.current.value = '';\n  }\n\n  const handleCommentSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if ((!newCommentText.trim() && !mediaBase64) || !user) return;\n\n    try {\n        if(editingComment) {\n            const updated = await api.updateComment(animeId, editingComment.id, newCommentText);\n            const updateInState = (list: CommentType[]): CommentType[] => {\n                return list.map(c => {\n                    if (c.id === updated.id) return { ...c, text: updated.text };\n                    if (c.replies) return { ...c, replies: updateInState(c.replies) };\n                    return c;\n                });\n            };\n            setComments(prev => updateInState(prev));\n            toast({ title: \"Comentario actualizado\" });\n        } else {\n            const addedComment = await api.addComment(animeId, { \n                text: newCommentText, \n                parentId: replyTo?.id,\n                mediaBase64: mediaBase64 \n            });\n            const addReplyToComment = (comments: CommentType[], parentId: string, reply: CommentType): CommentType[] => {\n                return comments.map(c => {\n                    if (c.id === parentId) {\n                        const newReplies = [...(c.replies || []), reply];\n                        return { ...c, replies: newReplies };\n                    }\n                    if (c.replies) {\n                        return { ...c, replies: addReplyToComment(c.replies, parentId, reply) };\n                    }\n                    return c;\n                });\n            };\n            if(replyTo) {\n                setComments(prev => addReplyToComment(prev, replyTo.id, addedComment));\n            } else {\n                setComments(prev => [addedComment, ...prev]);\n            }\n        }\n      resetForm();\n    } catch (error) {\n      toast({ variant: 'destructive', title: 'Error', description: 'No se pudo publicar el comentario.' });\n    }\n  };\n  \n  const handleDeleteConfirm = async () => {\n    if (!deletingCommentId) return;\n    try {\n        await api.deleteComment(animeId, deletingCommentId);\n        const removeOrMarkComment = (list: CommentType[]): CommentType[] => {\n            return list.reduce((acc, c) => {\n                if (c.id === deletingCommentId) {\n                    if (c.replies && c.replies.length > 0) {\n                        acc.push({ ...c, text: '', isDeleted: true, mediaUrl: undefined });\n                    }\n                } else {\n                    if(c.replies) c.replies = removeOrMarkComment(c.replies);\n                    acc.push(c);\n                }\n                return acc;\n            }, [] as CommentType[]);\n        };\n        setComments(prev => removeOrMarkComment(prev));\n        toast({ title: \"Comentario eliminado\" });\n    } catch (error) {\n         toast({ variant: 'destructive', title: 'Error', description: 'No se pudo eliminar el comentario.' });\n    } finally {\n        setDeletingCommentId(null);\n    }\n  };\n  \n  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n        setMediaPreview(URL.createObjectURL(file));\n        const dataUri = await fileToDataUri(file);\n        setMediaBase64(dataUri);\n    }\n  };\n\n  const topLevelComments = comments.filter(c => !c.parent);\n\n  return (\n    <>\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"font-headline text-xl\">Discusión de la Comunidad</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {user ? (\n          <form onSubmit={handleCommentSubmit} className=\"mb-6 space-y-4\">\n            <div className=\"flex gap-4\">\n              <Link href={`/profile/${user.username}`}>\n                <Avatar>\n                  <AvatarImage src={user.avatarUrl || `https://placehold.co/40x40.png`} alt={`@${user.name}`} />\n                  <AvatarFallback>{getInitials(user.name)}</AvatarFallback>\n                </Avatar>\n              </Link>\n              <div className=\"w-full\">\n                {replyTo && (\n                    <div className=\"text-sm bg-muted p-2 rounded-t-md flex justify-between items-center\">\n                        <p className=\"text-muted-foreground\">Respondiendo a <span className=\"font-semibold text-foreground\">{replyTo.author?.name}</span></p>\n                        <Button variant=\"ghost\" size=\"icon\" className=\"h-5 w-5\" onClick={resetForm}><X className=\"h-3 w-3\" /></Button>\n                    </div>\n                )}\n                 {editingComment && (\n                    <div className=\"text-sm bg-muted p-2 rounded-t-md flex justify-between items-center\">\n                        <p className=\"font-semibold text-primary\">Editando comentario...</p>\n                        <Button variant=\"ghost\" size=\"icon\" className=\"h-5 w-5\" onClick={resetForm}><X className=\"h-3 w-3\" /></Button>\n                    </div>\n                )}\n                <Textarea\n                  ref={textareaRef}\n                  placeholder=\"Comparte tus pensamientos...\"\n                  value={newCommentText}\n                  onChange={(e) => setNewCommentText(e.target.value)}\n                  className={cn((replyTo || editingComment) && \"rounded-t-none\")}\n                  rows={3}\n                />\n                 {mediaPreview && (\n                    <div className=\"mt-2 p-2 border rounded-lg relative w-fit\">\n                        <Image src={mediaPreview} alt=\"media preview\" width={100} height={100} className=\"rounded-md\" />\n                        <Button variant=\"destructive\" size=\"icon\" className=\"h-6 w-6 absolute top-1 right-1\" onClick={() => { setMediaBase64(null); setMediaPreview(null); }}>\n                            <X className=\"h-4 w-4\" />\n                        </Button>\n                    </div>\n                 )}\n              </div>\n            </div>\n            <div className=\"flex justify-between items-center ml-14\">\n              <input type=\"file\" ref={fileInputRef} onChange={handleFileChange} accept=\"image/*\" className=\"hidden\"/>\n              <Button type=\"button\" variant=\"ghost\" size=\"icon\" onClick={() => fileInputRef.current?.click()} disabled={!!editingComment}>\n                 <Paperclip className=\"h-5 w-5\" />\n              </Button>\n              <Button type=\"submit\" disabled={(!newCommentText.trim() && !mediaBase64) || !user}>\n                {editingComment ? <><Check className=\"mr-2 h-4 w-4\"/>Guardar</> : \"Publicar\"}\n              </Button>\n            </div>\n          </form>\n        ) : (\n             <div className=\"text-center py-4 rounded-lg border-2 border-dashed\">\n                <h3 className=\"font-semibold\">Únete a la conversación</h3>\n                <p className=\"text-muted-foreground text-sm mt-1 mb-4\">Inicia sesión para compartir tus pensamientos sobre este anime.</p>\n                <Button asChild>\n                    <Link href=\"/login\"><LogIn className=\"mr-2 h-4 w-4\"/> Iniciar Sesión para Comentar</Link>\n                </Button>\n            </div>\n        )}\n        <Separator className=\"my-6\" />\n        <div className=\"space-y-6\">\n          {topLevelComments.length > 0 ? (\n            topLevelComments.map(comment => (\n                <Comment key={comment.id} comment={comment} onReply={setReplyTo} onDelete={setDeletingCommentId} onEdit={setEditingComment} />\n            ))\n          ) : (\n            <p className=\"text-center text-sm text-muted-foreground\">\n              Aún no hay comentarios. ¡Sé el primero en compartir tus pensamientos!\n            </p>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n     <AlertDialog open={!!deletingCommentId} onOpenChange={(open) => !open && setDeletingCommentId(null)}>\n        <AlertDialogContent>\n            <AlertDialogHeader>\n                <AlertDialogTitle>¿Estás absolutamente seguro?</AlertDialogTitle>\n                <AlertDialogDescription>\n                    Esta acción no se puede deshacer. Esto eliminará permanentemente este comentario.\n                </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n                <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                <AlertDialogAction onClick={handleDeleteConfirm} className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\">\n                    Eliminar\n                </AlertDialogAction>\n            </AlertDialogFooter>\n        </AlertDialogContent>\n    </AlertDialog>\n    </>\n  );\n}\n"
    },
    {
      "path": "src/components/continue-watching.tsx",
      "content": "\"use client\"\n\nimport { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { Button } from './ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';\nimport { PlayCircle } from 'lucide-react';\nimport * as api from '@/lib/api';\nimport { Anime } from '@/lib/types';\n\ninterface ContinueWatchingData {\n    animeId: string;\n    animeTitle: string;\n    animeImageUrl: string;\n    episodeId: string;\n    episodeTitle: string;\n    timestamp: number;\n}\n\nexport function ContinueWatching() {\n    const [lastWatched, setLastWatched] = useState<ContinueWatchingData | null>(null);\n    const [isClient, setIsClient] = useState(false);\n    const [showBanner, setShowBanner] = useState(false);\n\n    useEffect(() => {\n        setIsClient(true);\n        let data: ContinueWatchingData | null = null;\n        try {\n            const storedData = localStorage.getItem('continue-watching');\n            if (storedData) {\n                data = JSON.parse(storedData);\n            }\n        } catch (error) {\n            console.error(\"Failed to parse continue watching data:\", error);\n            localStorage.removeItem('continue-watching');\n        }\n\n        if (data) {\n            setLastWatched(data);\n        }\n    }, []);\n\n    useEffect(() => {\n        const checkLastEpisode = async () => {\n            if (!lastWatched) {\n                setShowBanner(false);\n                return;\n            }\n\n            const animeDetails = await api.getAnimeById(lastWatched.animeId);\n            if (!animeDetails || !animeDetails.seasons || animeDetails.seasons.length === 0) {\n                setShowBanner(true); // Show if we can't verify\n                return;\n            }\n            \n            const lastSeason = animeDetails.seasons[animeDetails.seasons.length - 1];\n            if (!lastSeason.episodes || lastSeason.episodes.length === 0) {\n                 setShowBanner(true); // Show if we can't verify\n                 return;\n            }\n            \n            const lastEpisode = lastSeason.episodes[lastSeason.episodes.length - 1];\n            \n            if (lastWatched.episodeId === lastEpisode.id) {\n                setShowBanner(false); // It's the last episode, don't show\n            } else {\n                setShowBanner(true); // It's not the last one, show\n            }\n        };\n\n        if(isClient) {\n            checkLastEpisode();\n        }\n\n    }, [lastWatched, isClient]);\n\n\n    if (!isClient || !lastWatched || !showBanner) {\n        return null;\n    }\n\n    return (\n        <Card className=\"bg-gradient-to-r from-primary/10 to-transparent\">\n            <CardHeader>\n                <CardTitle>Continue Watching</CardTitle>\n                <CardDescription>Pick up where you left off.</CardDescription>\n            </CardHeader>\n            <CardContent>\n                <div className=\"flex flex-col sm:flex-row gap-4 items-center\">\n                    <div className=\"relative w-full sm:w-48 aspect-video rounded-md overflow-hidden shrink-0\">\n                        <Image\n                            src={lastWatched.animeImageUrl}\n                            alt={lastWatched.animeTitle}\n                            fill\n                            className=\"object-cover\"\n                        />\n                    </div>\n                    <div className=\"flex-grow text-center sm:text-left\">\n                        <h3 className=\"font-bold text-lg\">{lastWatched.animeTitle}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{lastWatched.episodeTitle}</p>\n                    </div>\n                    <Button asChild className=\"w-full sm:w-auto mt-4 sm:mt-0 shrink-0\">\n                        <Link href={`/watch/${lastWatched.animeId}/${lastWatched.episodeId}`}>\n                            <PlayCircle className=\"mr-2 h-4 w-4\" />\n                            Continue\n                        </Link>\n                    </Button>\n                </div>\n            </CardContent>\n        </Card>\n    );\n}\n"
    },
    {
      "path": "src/components/episode-comment-section.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect, useRef } from 'react';\nimport type { EpisodeComment as CommentType, User } from '@/lib/types';\nimport * as api from '@/lib/api';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Avatar, AvatarFallback, AvatarImage } from './ui/avatar';\nimport { Button } from './ui/button';\nimport { Textarea } from './ui/textarea';\nimport { Separator } from './ui/separator';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Trash, Reply, X, Paperclip, Pencil, Check } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport Image from 'next/image';\nimport { cn } from '@/lib/utils';\nimport Link from 'next/link';\nimport {\n    AlertDialog,\n    AlertDialogAction,\n    AlertDialogCancel,\n    AlertDialogContent,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface EpisodeCommentSectionProps {\n  initialComments: CommentType[];\n  episodeId: string;\n}\n\nconst getInitials = (name?: string) => {\n  if (typeof name !== 'string' || !name) return '';\n  return name.split(' ').map(n => n[0]).join('').toUpperCase();\n};\n\nconst isAdminRole = (role?: User['role']) => {\n    if (!role) return false;\n    return ['owner', 'co-owner', 'admin'].includes(role);\n}\n\nconst fileToDataUri = (file: File): Promise<string> => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as string);\n    reader.onerror = reject;\n    reader.readAsDataURL(file);\n});\n\nconst Comment = ({ comment, onReply, onDelete, onEdit }: { comment: CommentType, onReply: (c: CommentType) => void, onDelete: (id: string) => void, onEdit: (c: CommentType) => void }) => {\n    const { user } = useAuth();\n    \n    return (\n        <div className=\"flex items-start gap-4\">\n            <Link href={`/profile/${comment.author?.username}`}>\n                <Avatar>\n                    <AvatarImage src={comment.author?.avatarUrl || `https://placehold.co/40x40.png`} alt={`@${comment.author?.name}`} />\n                    <AvatarFallback>{getInitials(comment.author?.name)}</AvatarFallback>\n                </Avatar>\n            </Link>\n            <div className=\"flex-1\">\n                <div className=\"flex items-center gap-2 flex-wrap\">\n                    <Link href={`/profile/${comment.author?.username}`}>\n                      <p className=\"font-semibold hover:underline\">{comment.author?.name}</p>\n                    </Link>\n                    <span className=\"text-xs text-muted-foreground\">\n                        {formatDistanceToNow(new Date(comment.timestamp), { addSuffix: true })}\n                    </span>\n                </div>\n                {comment.parent && (\n                    <p className=\"text-xs text-muted-foreground italic mt-1\">\n                        Replying to {comment.parent.author?.name}\n                    </p>\n                )}\n                {comment.isDeleted ? (\n                    <p className=\"mt-1 text-sm italic text-muted-foreground\">[deleted]</p>\n                ) : (\n                    <>\n                        {comment.text && <p className=\"mt-1 text-sm text-foreground/90 pr-4\">{comment.text}</p>}\n                        {comment.mediaUrl && <Image src={comment.mediaUrl} alt=\"Comment media\" width={200} height={150} className=\"mt-2 rounded-md\" />}\n                    </>\n                )}\n                \n                <div className=\"flex items-center gap-2 mt-2\">\n                    {!comment.isDeleted && user && (\n                      <>\n                        <Button variant=\"ghost\" size=\"sm\" onClick={() => onReply(comment)} className=\"text-xs\">\n                            <Reply className=\"h-3 w-3 mr-1\" />\n                            Reply\n                        </Button>\n                        {(user.id === comment.author?.id || isAdminRole(user.role)) && (\n                          <>\n                            <Button variant=\"ghost\" size=\"sm\" onClick={() => onEdit(comment)} className=\"text-xs\">\n                                <Pencil className=\"h-3 w-3 mr-1\" />\n                                Edit\n                            </Button>\n                            <Button variant=\"ghost\" size=\"sm\" className=\"text-xs text-destructive hover:text-destructive\" onClick={() => onDelete(comment.id)}>\n                                <Trash className=\"h-3 w-3 mr-1\" />\n                                Delete\n                            </Button>\n                          </>\n                        )}\n                      </>\n                    )}\n                </div>\n\n                {comment.replies && comment.replies.length > 0 && (\n                     <div className=\"mt-4 pl-4 border-l-2 border-muted-foreground/20 space-y-4\">\n                        {comment.replies.map(reply => (\n                            <Comment key={reply.id} comment={reply} onReply={onReply} onDelete={onDelete} onEdit={onEdit} />\n                        ))}\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport function EpisodeCommentSection({ initialComments, episodeId }: EpisodeCommentSectionProps) {\n  const { user } = useAuth();\n  const [comments, setComments] = useState<CommentType[]>(initialComments);\n  const [newCommentText, setNewCommentText] = useState('');\n  const [mediaBase64, setMediaBase64] = useState<string | null>(null);\n  const [mediaPreview, setMediaPreview] = useState<string | null>(null);\n  const [replyTo, setReplyTo] = useState<CommentType | null>(null);\n  const [editingComment, setEditingComment] = useState<CommentType | null>(null);\n  const [deletingCommentId, setDeletingCommentId] = useState<string | null>(null);\n\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { toast } = useToast();\n  \n  useEffect(() => {\n    setComments(initialComments);\n  }, [initialComments]);\n\n  useEffect(() => {\n    if (editingComment) {\n        setNewCommentText(editingComment.text || '');\n        setReplyTo(null);\n        setMediaBase64(null);\n        setMediaPreview(null);\n        textareaRef.current?.focus();\n    }\n  }, [editingComment]);\n\n  const resetForm = () => {\n    setNewCommentText('');\n    setMediaBase64(null);\n    setMediaPreview(null);\n    setReplyTo(null);\n    setEditingComment(null);\n    if(fileInputRef.current) fileInputRef.current.value = '';\n  }\n\n  const handleCommentSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if ((!newCommentText.trim() && !mediaBase64) || !user) return;\n\n    try {\n        if(editingComment) {\n            const updated = await api.updateEpisodeComment(episodeId, editingComment.id, newCommentText);\n            const updateInState = (list: CommentType[]): CommentType[] => {\n                return list.map(c => {\n                    if (c.id === updated.id) return { ...c, text: updated.text };\n                    if (c.replies) return { ...c, replies: updateInState(c.replies) };\n                    return c;\n                });\n            };\n            setComments(prev => updateInState(prev));\n            toast({ title: \"Comment updated\" });\n        } else {\n            const addedComment = await api.addEpisodeComment(episodeId, { \n                text: newCommentText, \n                parentId: replyTo?.id,\n                mediaBase64: mediaBase64 \n            });\n            const addReplyToComment = (comments: CommentType[], parentId: string, reply: CommentType): CommentType[] => {\n                return comments.map(c => {\n                    if (c.id === parentId) {\n                        const newReplies = [...(c.replies || []), reply];\n                        return { ...c, replies: newReplies };\n                    }\n                    if (c.replies) {\n                        return { ...c, replies: addReplyToComment(c.replies, parentId, reply) };\n                    }\n                    return c;\n                });\n            };\n            if(replyTo) {\n                setComments(prev => addReplyToComment(prev, replyTo.id, addedComment));\n            } else {\n                setComments(prev => [addedComment, ...prev]);\n            }\n        }\n      resetForm();\n    } catch (error) {\n      toast({ variant: 'destructive', title: 'Error', description: 'Failed to post comment.' });\n    }\n  };\n  \n  const handleDeleteConfirm = async () => {\n    if (!deletingCommentId) return;\n    try {\n        await api.deleteEpisodeComment(episodeId, deletingCommentId);\n        const removeOrMarkComment = (list: CommentType[]): CommentType[] => {\n            return list.reduce((acc, c) => {\n                if (c.id === deletingCommentId) {\n                    if (c.replies && c.replies.length > 0) {\n                        acc.push({ ...c, text: '[deleted]', isDeleted: true, mediaUrl: undefined });\n                    }\n                } else {\n                    if(c.replies) c.replies = removeOrMarkComment(c.replies);\n                    acc.push(c);\n                }\n                return acc;\n            }, [] as CommentType[]);\n        };\n        setComments(prev => removeOrMarkComment(prev));\n        toast({ title: \"Comment Deleted\" });\n    } catch (error) {\n         toast({ variant: 'destructive', title: 'Error', description: 'Failed to delete comment.' });\n    } finally {\n        setDeletingCommentId(null);\n    }\n  };\n  \n  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n        setMediaPreview(URL.createObjectURL(file));\n        const dataUri = await fileToDataUri(file);\n        setMediaBase64(dataUri);\n    }\n  };\n\n  const topLevelComments = comments.filter(c => !c.parent);\n\n  return (\n    <>\n    <div className=\"py-4\">\n      {user && (\n        <form onSubmit={handleCommentSubmit} className=\"mb-6 space-y-4\">\n          <div className=\"flex gap-4\">\n            <Link href={`/profile/${user.username}`}>\n              <Avatar>\n                <AvatarImage src={user.avatarUrl || `https://placehold.co/40x40.png`} alt={`@${user.name}`} />\n                <AvatarFallback>{getInitials(user.name)}</AvatarFallback>\n              </Avatar>\n            </Link>\n            <div className=\"w-full\">\n              {replyTo && (\n                  <div className=\"text-sm bg-muted p-2 rounded-t-md flex justify-between items-center\">\n                      <p className=\"text-muted-foreground\">Replying to <span className=\"font-semibold text-foreground\">{replyTo.author?.name}</span></p>\n                      <Button variant=\"ghost\" size=\"icon\" className=\"h-5 w-5\" onClick={resetForm}><X className=\"h-3 w-3\" /></Button>\n                  </div>\n              )}\n               {editingComment && (\n                  <div className=\"text-sm bg-muted p-2 rounded-t-md flex justify-between items-center\">\n                      <p className=\"font-semibold text-primary\">Editing comment...</p>\n                      <Button variant=\"ghost\" size=\"icon\" className=\"h-5 w-5\" onClick={resetForm}><X className=\"h-3 w-3\" /></Button>\n                  </div>\n              )}\n              <Textarea\n                ref={textareaRef}\n                placeholder=\"Share your thoughts on this episode...\"\n                value={newCommentText}\n                onChange={(e) => setNewCommentText(e.target.value)}\n                className={cn((replyTo || editingComment) && \"rounded-t-none\")}\n                rows={3}\n              />\n               {mediaPreview && (\n                  <div className=\"mt-2 p-2 border rounded-lg relative w-fit\">\n                      <Image src={mediaPreview} alt=\"media preview\" width={100} height={100} className=\"rounded-md\" />\n                      <Button variant=\"destructive\" size=\"icon\" className=\"h-6 w-6 absolute top-1 right-1\" onClick={() => { setMediaBase64(null); setMediaPreview(null); }}>\n                          <X className=\"h-4 w-4\" />\n                      </Button>\n                  </div>\n               )}\n            </div>\n          </div>\n          <div className=\"flex justify-between items-center ml-14\">\n            <input type=\"file\" ref={fileInputRef} onChange={handleFileChange} accept=\"image/*\" className=\"hidden\"/>\n            <Button type=\"button\" variant=\"ghost\" size=\"icon\" onClick={() => fileInputRef.current?.click()} disabled={!!editingComment}>\n               <Paperclip className=\"h-5 w-5\" />\n            </Button>\n            <Button type=\"submit\" disabled={!newCommentText.trim() && !mediaBase64}>\n              {editingComment ? <><Check className=\"mr-2 h-4 w-4\"/>Save</> : \"Post Comment\"}\n            </Button>\n          </div>\n        </form>\n      )}\n      <Separator className=\"mb-6\" />\n      <div className=\"space-y-6\">\n        {topLevelComments.length > 0 ? (\n          topLevelComments.map(comment => (\n            <Comment key={comment.id} comment={comment} onReply={setReplyTo} onDelete={setDeletingCommentId} onEdit={setEditingComment} />\n          ))\n        ) : (\n          <p className=\"text-center text-sm text-muted-foreground\">\n            No comments yet. Be the first to share your thoughts!\n          </p>\n        )}\n      </div>\n    </div>\n    <AlertDialog open={!!deletingCommentId} onOpenChange={(open) => !open && setDeletingCommentId(null)}>\n        <AlertDialogContent>\n            <AlertDialogHeader>\n                <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n                <AlertDialogDescription>\n                    This action cannot be undone. This will permanently delete this comment.\n                </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                <AlertDialogAction onClick={handleDeleteConfirm} className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\">\n                    Delete\n                </AlertDialogAction>\n            </AlertDialogFooter>\n        </AlertDialogContent>\n    </AlertDialog>\n    </>\n  );\n}\n"
    },
    {
      "path": "src/components/episode-dialog.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useState } from 'react';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport type { Episode } from '@/lib/types';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Loader2, PlusCircle, Trash } from 'lucide-react';\nimport { Textarea } from './ui/textarea';\n\nconst FormSchema = z.object({\n  title: z.string().min(1, 'Title is required.'),\n  duration: z.coerce.number().min(1, 'Duration is required.'),\n  synopsis: z.string().optional(),\n  sources: z.array(z.object({\n    server: z.string().min(1, 'Server name is required.'),\n    url: z.string().url('Must be a valid URL.'),\n    language: z.enum(['Subtitled', 'Latin Spanish', 'Castilian', 'English']),\n  })).min(1, 'At least one source is required.'),\n  seasonId: z.string().optional(), // Important for creation\n});\n\ntype FormData = z.infer<typeof FormSchema>;\n\ninterface EpisodeDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSave: (episode: Partial<Omit<Episode, 'id'>>) => Promise<void>;\n  episode: Episode | null;\n}\n\nexport function EpisodeDialog({ isOpen, onOpenChange, onSave, episode }: EpisodeDialogProps) {\n  const form = useForm<FormData>({\n    resolver: zodResolver(FormSchema),\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"sources\"\n  });\n\n  const [isSaving, setIsSaving] = useState(false);\n  \n  useEffect(() => {\n    if (isOpen) {\n        if (episode) {\n            form.reset({\n                title: episode.title,\n                duration: episode.duration,\n                synopsis: episode.synopsis || '',\n                sources: episode.sources.map(s => ({ server: s.server, url: s.url, language: s.language })),                seasonId: episode.seasonId,\n            });\n        } else {\n             // Logic to get the current season ID would be passed in props for new episodes\n            form.reset({\n                title: '',\n                duration: 0,\n                synopsis: '',\n                sources: [{ server: '', language: 'Subtitled', url: '' }],\n            });\n        }\n    }\n  }, [episode, isOpen, form]);\n\n  const handleSubmit = async (data: FormData) => {\n    setIsSaving(true);\n    await onSave(data);\n    setIsSaving(false);\n  };\n  \n  const handleOpenChange = (open: boolean) => {\n    if (!open) {\n      form.reset();\n    }\n    onOpenChange(open);\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleOpenChange}>\n      <DialogContent className=\"sm:max-w-xl\">\n        <DialogHeader>\n          <DialogTitle>{episode ? 'Edit Episode' : 'Add New Episode'}</DialogTitle>\n          <DialogDescription>\n             {episode ? 'Make changes to the episode details below.' : 'Add a new episode to the season.'}\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4 py-4 max-h-[70vh] overflow-y-auto pr-4\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <FormField control={form.control} name=\"title\" render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Title</FormLabel>\n                  <FormControl><Input {...field} /></FormControl>\n                  <FormMessage />\n                </FormItem>\n              )} />\n              <FormField control={form.control} name=\"duration\" render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Duration (min)</FormLabel>\n                  <FormControl><Input type=\"number\" {...field} /></FormControl>\n                  <FormMessage />\n                </FormItem>\n              )} />\n            </div>\n\n             <FormField control={form.control} name=\"synopsis\" render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Synopsis</FormLabel>\n                  <FormControl><Textarea placeholder=\"Episode synopsis...\" {...field} /></FormControl>\n                  <FormMessage />\n                </FormItem>\n              )} />\n            \n            <div className=\"space-y-4\">\n              <FormLabel>Sources</FormLabel>\n              {fields.map((field, index) => (\n                <div key={field.id} className=\"space-y-2 border p-3 rounded-lg relative\">\n                   <Button variant=\"ghost\" size=\"icon\" onClick={() => remove(index)} className=\"absolute top-1 right-1 h-6 w-6\">\n                        <Trash className=\"h-4 w-4 text-destructive\" />\n                   </Button>\n                   <FormField\n                    control={form.control}\n                    name={`sources.${index}.server`}\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-xs\">Server</FormLabel>\n                        <FormControl><Input placeholder=\"e.g., PixelStream\" {...field} /></FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name={`sources.${index}.url`}\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-xs\">URL</FormLabel>\n                        <FormControl><Input placeholder=\"https://...\" {...field} /></FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name={`sources.${index}.language`}\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-xs\">Language</FormLabel>\n                         <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl><SelectTrigger><SelectValue /></SelectTrigger></FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"Subtitled\">Subtitled</SelectItem>\n                              <SelectItem value=\"Latin Spanish\">Latin Spanish</SelectItem>\n                              <SelectItem value=\"Castilian\">Castilian</SelectItem>\n                              <SelectItem value=\"English\">English</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              ))}\n              <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={() => append({ server: '', url: '', language: 'Subtitled' })}>\n                <PlusCircle className=\"mr-2 h-4 w-4\" />\n                Add Source\n              </Button>\n            </div>\n\n            <DialogFooter>\n              <Button type=\"button\" variant=\"ghost\" onClick={() => handleOpenChange(false)} disabled={isSaving}>Cancel</Button>\n              <Button type=\"submit\" disabled={isSaving}>\n                {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Save Changes\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"
    },
    {
      "path": "src/components/related-animes.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport type { Anime } from '@/lib/types';\nimport * as api from '@/lib/api';\nimport { suggestRelatedAnimeAction } from '@/app/actions';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Badge } from './ui/badge';\nimport { Clapperboard, Star } from 'lucide-react';\nimport { Skeleton } from './ui/skeleton';\n\ninterface RelatedAnimesProps {\n  anime: Anime;\n}\n\nexport function RelatedAnimes({ anime }: RelatedAnimesProps) {\n  const [relatedAnimes, setRelatedAnimes] = useState<Anime[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchRelated() {\n      if (!anime) return;\n      setLoading(true);\n      try {\n        const suggestedResult = await suggestRelatedAnimeAction({\n          title: anime.title,\n          genres: (anime.genres || []).map(g => g.name).join(', '),\n          description: anime.description,\n        });\n        \n        if (suggestedResult && suggestedResult.recommendations) {\n           const allAnimes = await api.getAnimes();\n           const recommendedAnimes = allAnimes\n            .filter((a: Anime) => \n              suggestedResult.recommendations.includes(a.title) && a.id !== anime.id\n            )\n            .sort((a, b) => {\n              return suggestedResult.recommendations.indexOf(a.title) - suggestedResult.recommendations.indexOf(b.title);\n            })\n            .slice(0, 5);\n          setRelatedAnimes(recommendedAnimes);\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch related animes:\", error);\n        setRelatedAnimes([]);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    if (anime?.id) {\n        fetchRelated();\n    }\n  }, [anime]);\n\n  if (loading) {\n     return (\n        <Card>\n            <CardHeader>\n                <div className=\"flex items-center gap-2\">\n                    <Clapperboard className=\"h-5 w-5 text-primary\" />\n                    <CardTitle className=\"font-headline text-xl\">You Might Also Like</CardTitle>\n                </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n                {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"flex items-start gap-4\">\n                        <Skeleton className=\"h-[75px] w-[100px] rounded-md\" />\n                        <div className=\"flex-1 space-y-2\">\n                            <Skeleton className=\"h-4 w-3/4\" />\n                            <Skeleton className=\"h-4 w-1/4\" />\n                            <Skeleton className=\"h-4 w-1/2\" />\n                        </div>\n                    </div>\n                ))}\n            </CardContent>\n        </Card>\n     );\n  }\n\n  if (relatedAnimes.length === 0) {\n    return null;\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center gap-2\">\n          <Clapperboard className=\"h-5 w-5 text-primary\" />\n          <CardTitle className=\"font-headline text-xl\">You Might Also Like</CardTitle>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {relatedAnimes.map(related => (\n            <Link href={`/anime/${related.id}-${related.title.toLowerCase().replace(/ /g, '-')}`} key={related.id} className=\"block group\">\n              <div className=\"flex items-start gap-4 p-2 -m-2 rounded-lg hover:bg-muted/50 transition-colors\">\n                 <Image\n                    src={related.imageUrl}\n                    alt={related.title}\n                    width={100}\n                    height={75}\n                    className=\"rounded-md object-cover aspect-[4/3]\"\n                    data-ai-hint={`${(related.genres?.[0]?.name || 'anime').toLowerCase()} poster`}\n                 />\n                 <div className=\"flex-1\">\n                    <p className=\"font-semibold group-hover:text-primary transition-colors\">{related.title}</p>\n                    <div className=\"flex items-center gap-1.5 text-yellow-400 mt-1\">\n                        <Star className=\"h-4 w-4 fill-current\" />\n                        <span className=\"text-sm font-bold text-foreground\">{related.rating}</span>\n                    </div>\n                     <div className=\"flex flex-wrap gap-1 mt-2\">\n                        {(related.genres || []).slice(0, 2).map(g => (\n                            <Badge key={g.id} variant=\"secondary\" className=\"text-xs\">{g.name}</Badge>\n                        ))}\n                    </div>\n                 </div>\n              </div>\n            </Link>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n"
    },
    {
      "path": "src/components/ui/accordion.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n"
    },
    {
      "path": "src/components/ui/alert-dialog.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"
    },
    {
      "path": "src/components/ui/alert.tsx",
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n"
    },
    {
      "path": "src/components/ui/avatar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n"
    },
    {
      "path": "src/components/ui/badge.tsx",
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"
    },
    {
      "path": "src/components/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all duration-300 ease-in-out focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:scale-[1.03] active:scale-[0.98]\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"
    },
    {
      "path": "src/components/ui/card.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm transition-colors duration-300\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\" flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"
    },
    {
      "path": "src/components/ui/carousel.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n"
    },
    {
      "path": "src/components/ui/checkbox.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n"
    },
    {
      "path": "src/components/ui/dialog.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"
    },
    {
      "path": "src/components/ui/dropdown-menu.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n"
    },
    {
      "path": "src/components/ui/form.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>(\n  {...props}: ControllerProps<TFieldValues, TName>\n) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"
    },
    {
      "path": "src/components/ui/input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"
    },
    {
      "path": "src/components/ui/label.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"
    },
    {
      "path": "src/components/ui/popover.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n"
    },
    {
      "path": "src/components/ui/progress.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n"
    },
    {
      "path": "src/components/ui/scroll-area.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"
    },
    {
      "path": "src/components/ui/select.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"
    },
    {
      "path": "src/components/ui/separator.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n"
    },
    {
      "path": "src/components/ui/sheet.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n"
    },
    {
      "path": "src/components/ui/sidebar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"./button\"\nimport { Input } from \"./input\"\nimport { Separator } from \"./separator\"\nimport { Sheet, SheetContent } from \"./sheet\"\nimport { Skeleton } from \"./skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"./tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)))\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n"
    },
    {
      "path": "src/components/ui/skeleton.tsx",
      "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n"
    },
    {
      "path": "src/components/ui/switch.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n"
    },
    {
      "path": "src/components/ui/table.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <table\n    ref={ref}\n    className={cn(\"w-full caption-bottom text-sm\", className)}\n    {...props}\n  />\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"
    },
    {
      "path": "src/components/ui/tabs.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"
    },
    {
      "path": "src/components/ui/textarea.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n"
    },
    {
      "path": "src/components/ui/toast.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed bottom-0 right-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n"
    },
    {
      "path": "src/components/ui/toaster.tsx",
      "content": "\"use client\"\n\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n"
    },
    {
      "path": "src/components/ui/tooltip.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n"
    }
  ]
}

    